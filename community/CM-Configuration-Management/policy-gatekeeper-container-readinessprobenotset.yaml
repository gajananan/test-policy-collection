apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-gatekeeper-containerreadinessprobenotset
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzJUTVJIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9kUG5Bd0FqNW1yd09IVVBmNDdTb1d5aXN1NFArOHlUUFlzWEJ3aQpIL0xGM2tIczBudDQxSy93VVJYRWJ1WlR1N05lbHNYRUsvYnpFNVRneEluRm1LVkdBRm96NENSOGp6bFpaZ0I3CjhGMnNiVE43ZjE3Y2VwaXVIejIzVnZsZStac05PcjFrV2x2OGV0NFR3MGZuNE5xWmJGSmQzQ21HbnQ3NWYvVVMKQXNYNHdtZy9saEt4WGdnZkdpc3ZTVWNDeHYwWURldjFRWk12NmZJR3huL2hlQ0g1QzVRODNjb3ViTEhNR2ZidgpiVUJPaHVZcS8xZk80aVlKbWt4RHhmMzNFaG5ZQlhhMUJNelpSNUVxNzkrU3VUV1ZVb0R6U0RkTXJGQ2RrK085CmpXdXkzaXIwck0yTjRJTnh5U0UyYVdNRGN3SHI0RWlnclJNYlh0MVpQcXhFQXl5NUNOb29iQ0x0cFpFSjlJYU4KV3FQS0hrbEp6NjZ5SVcyR2pWQ2xibzMxOTU4MGZYaERDUkZVcEwxb3RESlYzRFA0NjFPelBPemhLcEJuM3B4dwovcmFhVERtQXoxMDJ0SUpTM1orcDBaVVlPUXpCcGNWcmpnakR4Zk9yT3RVVzhsUkRLZU9JVnhCQjBJRURJZkltCjZtUytJSXhxME5QT0krTCtmRTdTNGV6VXdWVWVWYk1aCj1HSGFtCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-containerreadinessprobenotset
        spec:
          remediationAction: enforce
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: templates.gatekeeper.sh/v1beta1
                kind: ConstraintTemplate
                metadata:
                  creationTimestamp: null
                  name: containerreadinessprobenotset
                spec:
                  crd:
                    spec:
                      names:
                        kind: ContainerReadinessprobeNotset
                  targets:
                    - libs:
                        - |
                          package lib.konstraint

                          default is_gatekeeper = false

                          is_gatekeeper {
                            has_field(input, "review")
                            has_field(input.review, "object")
                          }

                          object = input {
                            not is_gatekeeper
                          }

                          object = input.review.object {
                            is_gatekeeper
                          }

                          format(msg) = gatekeeper_format {
                            is_gatekeeper
                            gatekeeper_format = {"msg": msg}
                          }

                          format(msg) = msg {
                            not is_gatekeeper
                          }

                          name = object.metadata.name

                          kind = object.kind

                          has_field(obj, field) {
                            obj[field]
                          }

                          missing_field(obj, field) = true {
                            obj[field] == ""
                          }

                          missing_field(obj, field) = true {
                            not has_field(obj, field)
                          }

                          is_service {
                            lower(kind) == "service"
                          }

                          is_statefulset {
                            lower(kind) == "statefulset"
                          }

                          is_daemonset {
                            lower(kind) == "daemonset"
                          }

                          is_deployment {
                            lower(kind) == "deployment"
                          }

                          is_pod {
                            lower(kind) == "pod"
                          }

                          is_namespace {
                            lower(kind) == "namespace"
                          }

                          is_workload {
                            containers[_]
                          }

                          pod_containers(pod) = all_containers {
                            keys = {"containers", "initContainers"}
                            all_containers = [c | keys[k]; c = pod.spec[k][_]]
                          }

                          containers[container] {
                            pods[pod]
                            all_containers = pod_containers(pod)
                            container = all_containers[_]
                          }

                          containers[container] {
                            all_containers = pod_containers(object)
                            container = all_containers[_]
                          }

                          container_images[image] {
                            containers[container]
                            image = container.image
                          }

                          container_images[image] {
                            image = object.spec.image
                          }

                          split_image(image) = [image, "latest"] {
                            not contains(image, ":")
                          }

                          split_image(image) = [image_name, tag] {
                            [image_name, tag] = split(image, ":")
                          }

                          pods[pod] {
                            is_statefulset
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_daemonset
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_deployment
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_pod
                            pod = object
                          }

                          volumes[volume] {
                            pods[pod]
                            volume = pod.spec.volumes[_]
                          }

                          mem_multiple("E") = 1000000000000000000000 { true }

                          mem_multiple("P") = 1000000000000000000 { true }

                          mem_multiple("T") = 1000000000000000 { true }

                          mem_multiple("G") = 1000000000000 { true }

                          mem_multiple("M") = 1000000000 { true }

                          mem_multiple("k") = 1000000 { true }

                          mem_multiple("") = 1000 { true }

                          mem_multiple("m") = 1 { true }

                          mem_multiple("Ki") = 1024000 { true }

                          mem_multiple("Mi") = 1048576000 { true }

                          mem_multiple("Gi") = 1073741824000 { true }

                          mem_multiple("Ti") = 1099511627776000 { true }

                          mem_multiple("Pi") = 1125899906842624000 { true }

                          mem_multiple("Ei") = 1152921504606846976000 { true }

                          get_suffix(mem) = suffix {
                            not is_string(mem)
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 0
                            suffix := substring(mem, count(mem) - 1, -1)
                            mem_multiple(suffix)
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 1
                            suffix := substring(mem, count(mem) - 2, -1)
                            mem_multiple(suffix)
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 1
                            not mem_multiple(substring(mem, count(mem) - 1, -1))
                            not mem_multiple(substring(mem, count(mem) - 2, -1))
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) == 1
                            not mem_multiple(substring(mem, count(mem) - 1, -1))
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) == 0
                            suffix := ""
                          }

                          canonify_mem(orig) = new {
                            is_number(orig)
                            new := orig * 1000
                          }

                          canonify_mem(orig) = new {
                            not is_number(orig)
                            suffix := get_suffix(orig)
                            raw := replace(orig, suffix, "")
                            re_match("^[0-9]+$", raw)
                            new := to_number(raw) * mem_multiple(suffix)
                          }

                          canonify_storage(orig) = new {
                            is_number(orig)
                            new := orig
                          }

                          canonify_storage(orig) = new {
                            not is_number(orig)
                            suffix := get_suffix(orig)
                            raw := replace(orig, suffix, "")
                            re_match("^[0-9]+$", raw)
                            new := to_number(raw) * mem_multiple(suffix)
                          }

                          canonify_cpu(orig) = new {
                            is_number(orig)
                            new := orig * 1000
                          }

                          canonify_cpu(orig) = new {
                            not is_number(orig)
                            endswith(orig, "m")
                            new := to_number(replace(orig, "m", ""))
                          }

                          canonify_cpu(orig) = new {
                            not is_number(orig)
                            not endswith(orig, "m")
                            re_match("^[0-9]+$", orig)
                            new := to_number(orig) * 1000
                          }

                          dropped_capability(container, cap) {
                            container.securityContext.capabilities.drop[_] == cap
                          }

                          added_capability(container, cap) {
                            container.securityContext.capabilities.add[_] == cap
                          }

                          no_read_only_filesystem(c) {
                            not has_field(c, "securityContext")
                          }

                          no_read_only_filesystem(c) {
                            has_field(c, "securityContext")
                            not has_field(c.securityContext, "readOnlyRootFilesystem")
                          }

                          priviledge_escalation_allowed(c) {
                            not has_field(c, "securityContext")
                          }

                          priviledge_escalation_allowed(c) {
                            has_field(c, "securityContext")
                            has_field(c.securityContext, "allowPrivilegeEscalation")
                          }
                        - |-
                          package lib.openshift

                          import data.lib.konstraint

                          is_deploymentconfig {
                            lower(konstraint.object.apiVersion) == "apps.openshift.io/v1"
                            lower(konstraint.object.kind) == "deploymentconfig"
                          }

                          is_route {
                            lower(konstraint.object.apiVersion) == "route.openshift.io/v1"
                            lower(konstraint.object.kind) == "route"
                          }

                          is_workload_kind {
                            is_deploymentconfig
                          }

                          is_workload_kind {
                            konstraint.is_statefulset
                          }

                          is_workload_kind {
                            konstraint.is_daemonset
                          }

                          is_workload_kind {
                            konstraint.is_deployment
                          }

                          is_all_kind {
                            is_workload_kind
                          }

                          is_all_kind {
                            konstraint.is_service
                          }

                          is_all_kind {
                            is_route
                          }

                          pods[pod] {
                            is_deploymentconfig
                            pod = konstraint.object.spec.template
                          }

                          pods[pod] {
                            pod = konstraint.pods[_]
                          }

                          containers[container] {
                            pods[pod]
                            all_containers = konstraint.pod_containers(pod)
                            container = all_containers[_]
                          }

                          containers[container] {
                            container = konstraint.containers[_]
                          }
                      rego: |-
                        package ocp.bestpractices.container_readinessprobe_notset

                        import data.lib.konstraint
                        import data.lib.openshift

                        violation[msg] {
                          openshift.is_workload_kind

                          container := openshift.containers[_]

                          konstraint.missing_field(container, "readinessProbe")
                          obj := konstraint.object

                          msg := konstraint.format(sprintf("%s/%s: container '%s' has no readinessProbe. See: https://docs.openshift.com/container-platform/4.4/applications/application-health.html", [obj.kind, obj.metadata.name, container.name]))
                        }
                      target: admission.k8s.gatekeeper.sh
            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: ContainerReadinessprobeNotset
                metadata:
                  name: containerreadinessprobenotset
                spec:
                  match:
                    kinds:
                      - apiGroups:
                          - apps.openshift.io
                          - apps
                        kinds:
                          - DeploymentConfig
                          - DaemonSet
                          - Deployment
                          - StatefulSet
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-audit-readiness
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: ContainerReadinessprobeNotset
                metadata:
                  name: containerreadinessprobenotset
                status:
                  totalViolations: 0
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-admission-readiness
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          object-templates:
            - complianceType: mustnothave
              objectDefinition:
                apiVersion: v1
                kind: Event
                metadata:
                  namespace: openshift-gatekeeper-system # set it to the actual namespace where gatekeeper is running if different
                  annotations:
                    constraint_action: deny
                    constraint_kind: ContainerReadinessprobeNotset
                    constraint_name: containerreadinessprobenotset
                    event_type: violation
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-policy-gatekeeper-containerreadinessprobenotset
  annotations:
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzJUTVJIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9kUG5Bd0FqNW1yd09IVVBmNDdTb1d5aXN1NFArOHlUUFlzWEJ3aQpIL0xGM2tIczBudDQxSy93VVJYRWJ1WlR1N05lbHNYRUsvYnpFNVRneEluRm1LVkdBRm96NENSOGp6bFpaZ0I3CjhGMnNiVE43ZjE3Y2VwaXVIejIzVnZsZStac05PcjFrV2x2OGV0NFR3MGZuNE5xWmJGSmQzQ21HbnQ3NWYvVVMKQXNYNHdtZy9saEt4WGdnZkdpc3ZTVWNDeHYwWURldjFRWk12NmZJR3huL2hlQ0g1QzVRODNjb3ViTEhNR2ZidgpiVUJPaHVZcS8xZk80aVlKbWt4RHhmMzNFaG5ZQlhhMUJNelpSNUVxNzkrU3VUV1ZVb0R6U0RkTXJGQ2RrK085CmpXdXkzaXIwck0yTjRJTnh5U0UyYVdNRGN3SHI0RWlnclJNYlh0MVpQcXhFQXl5NUNOb29iQ0x0cFpFSjlJYU4KV3FQS0hrbEp6NjZ5SVcyR2pWQ2xibzMxOTU4MGZYaERDUkZVcEwxb3RESlYzRFA0NjFPelBPemhLcEJuM3B4dwovcmFhVERtQXoxMDJ0SUpTM1orcDBaVVlPUXpCcGNWcmpnakR4Zk9yT3RVVzhsUkRLZU9JVnhCQjBJRURJZkltCjZtUytJSXhxME5QT0krTCtmRTdTNGV6VXdWVWVWYk1aCj1HSGFtCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
placementRef:
  name: placement-policy-gatekeeper-containerreadinessprobenotset
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-gatekeeper-containerreadinessprobenotset
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-policy-gatekeeper-containerreadinessprobenotset
  annotations:
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzJUTVJIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9kUG5Bd0FqNW1yd09IVVBmNDdTb1d5aXN1NFArOHlUUFlzWEJ3aQpIL0xGM2tIczBudDQxSy93VVJYRWJ1WlR1N05lbHNYRUsvYnpFNVRneEluRm1LVkdBRm96NENSOGp6bFpaZ0I3CjhGMnNiVE43ZjE3Y2VwaXVIejIzVnZsZStac05PcjFrV2x2OGV0NFR3MGZuNE5xWmJGSmQzQ21HbnQ3NWYvVVMKQXNYNHdtZy9saEt4WGdnZkdpc3ZTVWNDeHYwWURldjFRWk12NmZJR3huL2hlQ0g1QzVRODNjb3ViTEhNR2ZidgpiVUJPaHVZcS8xZk80aVlKbWt4RHhmMzNFaG5ZQlhhMUJNelpSNUVxNzkrU3VUV1ZVb0R6U0RkTXJGQ2RrK085CmpXdXkzaXIwck0yTjRJTnh5U0UyYVdNRGN3SHI0RWlnclJNYlh0MVpQcXhFQXl5NUNOb29iQ0x0cFpFSjlJYU4KV3FQS0hrbEp6NjZ5SVcyR2pWQ2xibzMxOTU4MGZYaERDUkZVcEwxb3RESlYzRFA0NjFPelBPemhLcEJuM3B4dwovcmFhVERtQXoxMDJ0SUpTM1orcDBaVVlPUXpCcGNWcmpnakR4Zk9yT3RVVzhsUkRLZU9JVnhCQjBJRURJZkltCjZtUytJSXhxME5QT0krTCtmRTdTNGV6VXdWVWVWYk1aCj1HSGFtCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
spec:
  clusterConditions:
    - status: "True"
      type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - {key: environment, operator: In, values: ["dev"]}
