apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-gatekeeper-containerreadinessprobenotset
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    integrityshield.io/message: H4sIAAAAAAAAA+xbaXPiyJb9Xr9C4Xkdzz2UjSQkAZ6oiWBHIPadih6HkFIL2pUpCdH9/vtLgcF4A4zd1V0zow/GJHnPPffeXG4qM0VXHwMf6o59R7iOqUvxreMC+0YyA4iAf2OJtqgCC9joVnfSIfXF0G35juhuqn6xABJlEYl3XwjCFi2ww7hRRQQMAFyMIDk2EnUb+D4QZfwJoes7C2A7CAKE5UQb/ysizAAmMMQZNCASbVn0ZXhHtPnBkBh0iRxJ3rCZM+UlzE51fB1ggFKLKDm2oquBvyFBtPZVz0XDBvqOucG6oYmiCIGJ7XwK+wW6QErs87GcrG/KChLa+B3YiuNLAP8o61BcmAA7WBFNmJQ8+BMByzUx6wcX3RDOYgkkVAaKbusblE158ojvjehOcBvZJ6wfwryrcRju3XNp2LfPziu756h39kIgBL6O4jvCdKKD8q1Pnvtq99wQkoN/0EVbAsPYxaQt7BBNDMGTasQR177m4r2220fjb6GGHbvA3qJeyO69DJGP/YOGD/IvKr7m7N0jYacm1Ia6BXBnsNw7wg5M85Wa2/CcF4y9f58F5VGr/Frx2wI7AvCtHw/cseXXf8Kv/To/gkCirwL0BuwNYeqLIypviD/e/A13OFEycP9IMG6NfZS+HJGQgSIGJiJ0eP/YBIhvD134iOBTgd+P1CQITYT3ig5M+Vq33QB9Ja58EOoguvr1PWK3WyEsvW3kR6X/dYz7Vh5bucE9QR63s6fGfo7WB2tuH0qPc/gU/XgkskR0bUH1V0ziEe9++8MnUSBeQf5G/H6F1V7hUQuq//oc/vjjRwUuGQWwxm2kbndD221SfEwsGR0exZJvx2o/NnYs8JXY/PvrCQtxze+bir9dapqlQ6jb6iuavxHID8DZBIhv34irq7+IRhLpV/13KR/cbCDwQ106pRnP4cC/TmL768YDD1IXOyJRjPNJoAR4+D3VJV8of5T8CAFZBBaeO96tfi/3IeXANZ04SfDeq30v+BH1riO/Uy+W+IjCTYaBp+33NrS93EeUR45vmI54yuR9Aga/31880mA/3T8CXeOvSecWTfOg9AQPA8RwM5c8SlzhbCDJdEuPJcfmF+K5wm/Ed4n4Y4P83fjtvwgJl2Bqt0lSiAuwvRcbfOC1/b+/nbAQq4bf8Z9jSl+x4RXfnhfQFxH4QIAvsfeUJdu586805l63cEINv28+TpnzqguOZ1UJLCa+r367KfmxtHckHjKVpO1/jAbEK1W0pXC9+Zt09S0X3F83C050dYpVMqk/2AOvd7J3lyf9R0htRuGveGGmniL1sv63LfBnMNz3/tOp+MFUf2pAeRZY9NaS/fNJ7hOCvzHFfdbw9+WIa51N7lI6oWMGOKH4vv38nGlqi3Uwod7utFw+LlvAurcCE+muCa6vKldJH6bI1x7i9+3K4R1w3bfgLsAavop1AVDtJdAFKK1nKBdAGIcQF8jvxS+QtbbCF0g29Qe9NHOh53YATI7NchfGcIeRzWQZKncpleEOJp9nKYqjs9lLCXUfkCiazeXzeZLLMTR3Ka3KDoyl8zTFkgyX4HH588mpAN3DQFH01TWGTsC23857wQORr9vqRvJo9QfMu4+8qLiQ6TtYSk5goy34fxPkmQbBYPGI//UQ44agvhI31HGdT+K5Rb04ifnBHnq5R3H4nOch+v+wh5I+9My4U03puO53AdJnAP503fbbtx/t85/RRecObZdbJIm2Y+tKfI9VXju+vtk2sEF02iI7sBbA38ocjyRGwxyTisR/bpKbH0z2YQo8m/CjXw/ifVrMFzd2+ni1JEpgI/D1AQsveU9s4/ng3hKRpF1f/c938ib/W+ofV18TxLNci5ydcYkEdvJnjsR7p0Pk+Ml7gT+9lfwFTP+/iXxKE5Hc4OcZRN5H9r0tBNgyjHSkPQQ5WZ29M05PGgmW37SQHx2j95qd1H+v6a827LObxKPHtlZ9rHXIvuO6QL6XRFdc6KaO4uv9+2KcdIjuqe3mx5fUEEhBcogp2XYBK3S7h9QBvE30fL/f7Ajj8kvZirL8A7hiLR+najv3ydGke8c243tFNwGMIcLTuHSK5NN9a+lrsn/8hOzl75Iv5nQ5nxf2PHf95tyPKHcwpb7joOqe1Qdemft6iGFkFdwDKInm5mDZvWgm26XyXxqADzL7SBiOh2BDobtlp4LKntsJU9/65Yb44+aYGw5OpCUnOaGmK0cPpOmW6/iI2JywOf8Y25NX+dLmFOh5G+p79IeDWLePxyO3G+2i68JH5ttTp8eWJG8jv3ZWYUv1I3v4vhOgMw8PnLR1g/XZxm5AP+OUwv3mQNU7tnS2zv1Bmg9ccPb+3J+n/5yttz9R+zm7aqfUJ3v550X8CdE/X+OzSG9PfP0QQzdd6eIJ6ZJd0ZNdaLf9+HIE+KHbpC9IbAR/7GGWCw/vPCX9c57jOSRyYM/5fF4v94Hq3B3LL3bZhSO5twsAkeuLEsK9ET6qvn96a+D+4drAm5BH8o9zRc7Ic0Ld2WZd3y144tDJwXT8fKg7J4qbVwt7iKcROSJ/EMWnh3MPlmFXe9d2E9ceTSDxoJAweTFMHN1mhOozmYcj4DiU+JtyffULTP8CD26IEP/8Bf4zyX9xZk88ZXdLDAC4IzSEXHiXTsuOdJjWSY6V3qPcJENWoirN3DJpnACaurS943X45UYDoom0Ww1ZJl7Uf8f2bLKer4mtT0+Jfz1YjibffzvyruOtvrC9NXKH18WbeDj2rZF7dm3nieSfdGNI2gfj3XeG3nFJ5tj1oc+8FLR5N/P6ZZuE9pv3cG4Sn9TwdOweuaqzrfZs9XCy9psVjhLaypf383bp1LyNK29SxMHRFPEQ8mi1wUO+u4P7Ce74iYGso5t989lLnHGrT09u9VnEfxCRbprEAs8/IW6IuiwDm1jELyWwAJ6q/ORQu/uU8N/sPuBP2rtx4wte7RrIQaI53s21eKYgf5rWuRvm/3e1UBzBDzfS8K1WWAlfG6ZOtbbNLYq7xxzpMArb15PYjcltGB3h9kQgDRA4yQxE81GaiDTgg4OLb3gRRfiBbeO0idAVQtYVBfivj6EvbpA/fx775L34EF0cxfhU3cvupj6BuKQvJg9I4nCPNkHfJ7pfbm5uvry7cz1c2E92i5LSIv6KffrK1f3F9pebT7jCj00HatLgcXPAGW/CBMcZYmJ3RJ2BfGH3pChpQqeXbW2eWnM5NVPMjCANXWnu+Xq87rmW2a+2WzWDK4R9U1Qbsm9NNL5q2ELNatjpjNH1FjDgaKXakr2g3mk22DDsyFJGZSuGvVS7bCNollt1rlYI5D6wBpEaWrWsMy9VaqssnZutmFVDsuaSIjByrZSCDJ8BgddfcX26VRksGaaX86v1irpaavp4XinyBRVSOV00u52SMlNHOa0AGWtVkweVghnTvJyGvV6tB2tqcTmorASuHAzaNa4rK/VVth+taa6zNFZrP+83a7lysLKXZqFcyA4RGacj156NJYMsh6TntkmpWFibcXs+j/V6tqIKSJtrZXJQWNTGSn9t1Ju+oPglM78MVy6zXhQFlvRahaHJlMpuXh17+pB24z5gCoJPV0a1mdtNV8ww1W8uRu7KrZocFBBDObymVREscGW7PeBX6YDtOGI+0JphoyGZMtvQJH0gldwpnxrELLVi2UabmsaTqTqJalOqDOlUf1XtFd3yKopXJBp4/MybVkOLMQcLq2+G+tJgZFUANSvLuyYzMZx2mq21YEjVVuu23ZjP2sPqYlzntLpTrjJRz846gT6inHSBLJELL5OdqPOqJ8NAQAXVKEKQEewy1JUgJ6TrTMgyoLeqr2pscT4rZE1y5NUHvUaKVlRJLiMocMVcM6JiYzT0PKNe5qs8CPrV/mzSbxfamcrUxxEs2TH0eLtXLyB/4Nh+vmkoWr1ZAG4Em1M7CCfkcm7MS3yRpHKG766pqcRnrGgUdCcGL9PjZZ/uUu5SzMUMavjlaTgsDzp9jVaUSrZE9+JuCXI8zI9GuJGUFWcWpUd5qzyq+N1uKlXp1hmpaRedaq/WGjWHrTltrMbT0sTqO3Jr2KbGlMSInUhtGd1sZjGjq6N6BzbXLNWW6GXPLKbHnsAWDQMYcFYhW2SbCyepSoEcc2MhLYNReT2a9UKvT9sTcRZFdujl9RTV53h36GR7ulVTGo1Wb6WluKxvaGGjJWlSqazPwLpII0qU405s2KqEJk1Y9b01Oc5UxvmoEU+AUdWrzIiLmKIb0FR5kBrTIyXbSrUaZtDKGu1CZTjjwvWg0E7BZVPtothbO5TcpmQxotvFsSF0G3OzUs7yRRPYYK6Px7kIieOMXl4tF5zbqNd1TgmNHmn2WtRoMKiMVIGWyxLLCkom40nz0qiUqeWaclOcGe3GgkVVVGqXOlGPKWVpyjQG6zmlkJouALfY07P1lFfu2FRhOp7MJ6UiaLjyuDOtN+Z0Txc64+pwkWHomlqSx7Vx3eGyKc8jZckR0l6RzM49umM2wumsjqrdeUWRjTTTHNnOqA5LZVqMO1RtkbcijalH62HGTCl6AKyU7xTnAzqSEFym0mzDVe3imIxW676Xmjpsz1vXWN8eTNYFUnP6Wt1OB3NXb8IM3/capsctcxDkBlEol0btaVsIM8p4VF9xwKxmnFl6aJAFIVA0JBW5dX3kRZ2ekIcFe1wAC1Aj1apuzBSHb6SaMlum+KDSMfx0f9JJu5OR0m30ivY4BabVFbW0akVJsWW27a+9QTBaqQsr1dVyHYFkQiELB4GT6mueYo/zypSKpemYBnaVotzMYKyynDJ1c921kW0J2lReZeZraVnRBK3dctNyoS4WRpPMcJyNBi3DTbOtATWfLNfVepCNHa6lk8VRsNAWXCvqptpDzREbrUZDW6b52UpzOpVyDVZdm58zfTGQDBYWAG3Gy7iabnfrQ05JRRo1UybLJu67aMLhYQm01WJOljM0Gyx6XTvVFiyHQ/VJJm7NUrmUSc5n9WY3aI+EVciwgg34ZZpsOP16C036xfJQ9UqerqR8rKtoMLEVtUC95WdNhmLQyu9kjJwwqCxEvlpcVibdrjAROu3VzDZndNhOZdfpZSXV5bhxOs0VyNFM704H7mzmxsNCrEBJH3fsUs5igJ6OGC9jlNblfMDY0J3Zs56icUW3Ss/bAV3p8FnGtZugvzLy0+GkZXDVvirEgTOSOsYcrccLimZdQPuFRZuxWzO2Og6yo46Wbak8z5pMVOx6ldD03FRKYESjEMlUnMvgpugWs9UimpmCIASDcrva5gfOwM3zEQoHfIsdZ+YzKLGFqtKDSzS2KdMTWaGq1GVzKJrCquLyVmuBOq5QlSco67TFbokeZEMyDNZNI2tHVJYy6TCfplQ2Sqn5BrNKTbtN0ZGnrBsFBUmcV2aQr2URN2Ot6nQxljh73S901vyiIUVjXi6MsnqXbmX4qeShFeqjzGrpGFTd1FDcaQuT4Si3dlG9Ua6Fo9JKnw46dCwu6JYftrxMfpDtzdXQa069XEUKW8hIJnaSKVWGtW7bpSbhmIcazS6a+VK/Ppm2p+tOD5lRjiwhv+/6mdzcI+sZOPLLpOY5k8Ha60tRyugAUFoFaC1wIB3LwqJEuyH03IlLcYgdAgHwdSemkaRnBiSTgqoWeAGmXOJ83pugoGoE0/q6X1edVmDUYlynVsnAzFAKqy0jPcRqwaDBdlbu2gM5u9Ga16ipWSVNOgLrgl0saAWGRaUF1Z83PcR4RrG5ZmhYnMR8mHeaiFfXlDmoWmN5RqZHi7LfGEqK36PoYbPjTkuxWWkN+HHON5zqUrFZLVsGnuln2bHfXLX5WrE3MhhKc+zmfCStJ/MOj5hisRk0QhrQ6UquH/Q7ca0U2uQyNKesQA9pr7Xs9AupyrL97/bOpddRHIvj+/oUpdqmSzGvJIzUi0B4JhAw2DxGsyCYhDeEQAIZzXcf7q2+1Y+pUUvT0qwidli2bGOL8//5+BwhngrRyJsNCYeze2x7bpyqfRMEs8rq2OfusU4vrt36IRizfhlsHjoZ/LiW7lYanFcGyfIbtxJuncc6zGQn44h5sMHr55XmA7+h5uU8m5eUpaf3w3Xt5QNAurxsRl0kwtWiqkjyUtq55pdlv6FE+5wT99ynCiDcancjtnUv5HY4XthresQK068iheb7YF8GdrYIl05yHuhTv1KmvJXP+9SQzke7JChh6wdz8W9yuBwfK1loWwPUpZc+rs3iihiQLC4Bj3giS1y6LPutfU0MWwWUV43aZSsbGHP36DId0m7x2LDivWfIjn30+0ELa2ndLnV/e3uOcdVFIaMb1mJJIS295DcGDB6N64w5CEO1Kq8nq0DjVM8GieBkFGddYI2itGgbF+RHMdAKY/44ekMnHOu4jCExiZaKlgV5R7/ZtbNX3WsilewiVaazRq0WN5dq2DzjpBhjv+fvIbXVpXK9ag7XQxZIBeF3LrRczWBXKcWxjbXezxum9FcaP4kuGI7rYpGd2IkO19VOsBq+SsKFKG7b2S7xe8NDm/vdxjHgJ0gUD7X26e5BUcV3sGcE+qhIyaAwuxoenKlGQ83m3s4rHLAv186aywL/WBeUcg8v216ZVK67mgV67K7WWXssHTng7X3D8XKsrH2o8kEwXK/M9NQCYaGJG662tof5d6aSlN26Foxqi8CtOpKiDdbMYSrre6fXjRTYihUKssVcd/zWGVbqKgvC8TmpB6a36ma92RZ57tERJc4K5ef/Jmhu2aWO+qGbJc3BAf3BoUSIiO5mgg2p7QWBUnULGWGsy9/KwV6c5YwjhaKNZNGmiUCKsIUIF6FkashrvVNpCqhKI2Pqg5MrHF0m7mxfv51oU7E9SnSeOnKxrkEaNoFHKQTLaqzGe1ehbpGnu6bXZkYuCHPbHfLAwy14Zg/k6aTwBZoNZALkq+lREwG8hrFQmTvinijCRb5JmfK2O6olQnL59CSdiexWO4BRMehei5/CQHb26Ew8M48ngJ5OeSWkTMCVJ9UMILrdg7qVTQzrebENsKIOuCACrPiVKZnOUWlXJ7mNQqAxYp4qRm1mWGKZMJeYgMaPyMdakmtPXIe30OmjGHBWnMsdpsd5xWBgypAxlHAwJW70Kl1xKvtp05R6qm3G9II7xsbe9s3AVEkfTvwtknrWU0gdFqSNmdDFnrlL1ODhIViSXIZeQdFmFeqQSYcDnZY2uFD2E8PjzsxPDM5cKTUhHWbkMottpFuRisPY2YxhsQERLvcnr2ehmlbG05QjhQvtMk0NpJtJ2TomwqP5LDrEYISpEJ8AXCEAC9fXFZuG3R5sOLFqfeIXz8jXHrPem9wc6m6dcgigKcDEhIrJOKoGoFfWcambQZkCA7d27Key7ZeciczjieYzG4wgllvZyUs9QOweM7LtgLQ7Se3KzEPOwfEE6daz6TE7PY3x6CJ2nscgkuAOFSGOpcd4YqDklMETyltg5rKVlIKVVOkhlvTBYASWPJp7XMkplmBv+81o7HTgoNY1qKaLd0KEcWkhvxVjxfTiqq2jArJhwU8uAzF+pjdUwEOIeB3XqWjngg4R1MOi7MU87NHU646fjobE2S4oOlfsK+gS11Rm5eITD89PUFCRmFOqo8yGffa+j3qIOGk2vlQkCq6DyNHGEKMCvZcd7ObnT+0H7YDJ+TexCT/e/g+I4w8UBQ7lG4H7OML426+nFD8GMZ9uwzuge+cjX/9C0LzfhV98h1/fu/CnNOg/+NGfdPoH9Oh93D+I+vgXZvYFj17w6AWPXvDoBY9e8OgFj17w6AWPXvDoBY9e8OgFj17w6AWPXvDo/w6PPnzDfmEiYlOT7Dd44uuHs9znL243fL+W9c1X51vyCCL+oer2HmXlW2aHX5t1kjKJ+6b71ui7F600tl3y7rH23Y/p6+d/Fsn0lgThnnVN/YZYfnrzs+qit6qftfqnz/eoHN4SWfz9C0nuX/7xr0//BlldrxfTYwAA
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzZWWVJIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9mVjlRd0FsQ2NYdXdKaDVybTA1NWhpc1RLZTdOdjBEcE5VSzhnQgp5VS9JZ05KYy9jZ1hRMGV1ZElkSEIwQXRvNlhZMjFCTU5QdDBvcE5Xby85eXpOZERtdyt6YjVSdFRjdE5OZFBKCjRwbmtFdmt4NTFPWjdWME9ZT3RTRGRlcjgrK3gwbXp3dVpzQzZTakVreXJISVY4YldLSWlTMVkzOHRlTVkrUGQKODAwdWxSNkpHQzlXZWZ2dTZIWExHcVRNOHZqVUsyQ0dIUXBQbmJWc3FuajJvVnJwTFJYTkNHWngyUXBSVnhybQpWOENXbGJqWmJzT3JoL045WUhwTkRabXRCMHEwdzhmV0U0NVlkN2RGM0VOY0p4NjIvMGpRbDNqc3JQSzdSOHBRCm1JaHc2Wm5aT2xOVkhhT3pjTXoxOFVya21odmFIV0luUys5eXcwcUlnUTVaa2JmTUdZWU5RUlVodFpCeVpCT08KQng3M2pIcFl0eXhsaW5BaDB6K0NOZWRDc2VSQ0g1SGFVQm52THFodENPSjdUYWlPK1UxYktUUHhQVzNkRUNTcQp1Z3BRWW9WNTlGY0lVSk9uaU1BN1ZPWUVLekVzWFM3eUt6amhoNzc2TVNzZ1JnYUtReTNWSk9vTS80Nmt6Umk2Cks3RnVNdWtJcmdETTArVkxwb080RnFhTTNWR054SE1ECj1YTGllCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-containerreadinessprobenotset
        spec:
          remediationAction: enforce
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: templates.gatekeeper.sh/v1beta1
                kind: ConstraintTemplate
                metadata:
                  creationTimestamp: null
                  name: containerreadinessprobenotset
                spec:
                  crd:
                    spec:
                      names:
                        kind: ContainerReadinessprobeNotset
                  targets:
                    - libs:
                        - |
                          package lib.konstraint

                          default is_gatekeeper = false

                          is_gatekeeper {
                            has_field(input, "review")
                            has_field(input.review, "object")
                          }

                          object = input {
                            not is_gatekeeper
                          }

                          object = input.review.object {
                            is_gatekeeper
                          }

                          format(msg) = gatekeeper_format {
                            is_gatekeeper
                            gatekeeper_format = {"msg": msg}
                          }

                          format(msg) = msg {
                            not is_gatekeeper
                          }

                          name = object.metadata.name

                          kind = object.kind

                          has_field(obj, field) {
                            obj[field]
                          }

                          missing_field(obj, field) = true {
                            obj[field] == ""
                          }

                          missing_field(obj, field) = true {
                            not has_field(obj, field)
                          }

                          is_service {
                            lower(kind) == "service"
                          }

                          is_statefulset {
                            lower(kind) == "statefulset"
                          }

                          is_daemonset {
                            lower(kind) == "daemonset"
                          }

                          is_deployment {
                            lower(kind) == "deployment"
                          }

                          is_pod {
                            lower(kind) == "pod"
                          }

                          is_namespace {
                            lower(kind) == "namespace"
                          }

                          is_workload {
                            containers[_]
                          }

                          pod_containers(pod) = all_containers {
                            keys = {"containers", "initContainers"}
                            all_containers = [c | keys[k]; c = pod.spec[k][_]]
                          }

                          containers[container] {
                            pods[pod]
                            all_containers = pod_containers(pod)
                            container = all_containers[_]
                          }

                          containers[container] {
                            all_containers = pod_containers(object)
                            container = all_containers[_]
                          }

                          container_images[image] {
                            containers[container]
                            image = container.image
                          }

                          container_images[image] {
                            image = object.spec.image
                          }

                          split_image(image) = [image, "latest"] {
                            not contains(image, ":")
                          }

                          split_image(image) = [image_name, tag] {
                            [image_name, tag] = split(image, ":")
                          }

                          pods[pod] {
                            is_statefulset
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_daemonset
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_deployment
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_pod
                            pod = object
                          }

                          volumes[volume] {
                            pods[pod]
                            volume = pod.spec.volumes[_]
                          }

                          mem_multiple("E") = 1000000000000000000000 { true }

                          mem_multiple("P") = 1000000000000000000 { true }

                          mem_multiple("T") = 1000000000000000 { true }

                          mem_multiple("G") = 1000000000000 { true }

                          mem_multiple("M") = 1000000000 { true }

                          mem_multiple("k") = 1000000 { true }

                          mem_multiple("") = 1000 { true }

                          mem_multiple("m") = 1 { true }

                          mem_multiple("Ki") = 1024000 { true }

                          mem_multiple("Mi") = 1048576000 { true }

                          mem_multiple("Gi") = 1073741824000 { true }

                          mem_multiple("Ti") = 1099511627776000 { true }

                          mem_multiple("Pi") = 1125899906842624000 { true }

                          mem_multiple("Ei") = 1152921504606846976000 { true }

                          get_suffix(mem) = suffix {
                            not is_string(mem)
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 0
                            suffix := substring(mem, count(mem) - 1, -1)
                            mem_multiple(suffix)
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 1
                            suffix := substring(mem, count(mem) - 2, -1)
                            mem_multiple(suffix)
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 1
                            not mem_multiple(substring(mem, count(mem) - 1, -1))
                            not mem_multiple(substring(mem, count(mem) - 2, -1))
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) == 1
                            not mem_multiple(substring(mem, count(mem) - 1, -1))
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) == 0
                            suffix := ""
                          }

                          canonify_mem(orig) = new {
                            is_number(orig)
                            new := orig * 1000
                          }

                          canonify_mem(orig) = new {
                            not is_number(orig)
                            suffix := get_suffix(orig)
                            raw := replace(orig, suffix, "")
                            re_match("^[0-9]+$", raw)
                            new := to_number(raw) * mem_multiple(suffix)
                          }

                          canonify_storage(orig) = new {
                            is_number(orig)
                            new := orig
                          }

                          canonify_storage(orig) = new {
                            not is_number(orig)
                            suffix := get_suffix(orig)
                            raw := replace(orig, suffix, "")
                            re_match("^[0-9]+$", raw)
                            new := to_number(raw) * mem_multiple(suffix)
                          }

                          canonify_cpu(orig) = new {
                            is_number(orig)
                            new := orig * 1000
                          }

                          canonify_cpu(orig) = new {
                            not is_number(orig)
                            endswith(orig, "m")
                            new := to_number(replace(orig, "m", ""))
                          }

                          canonify_cpu(orig) = new {
                            not is_number(orig)
                            not endswith(orig, "m")
                            re_match("^[0-9]+$", orig)
                            new := to_number(orig) * 1000
                          }

                          dropped_capability(container, cap) {
                            container.securityContext.capabilities.drop[_] == cap
                          }

                          added_capability(container, cap) {
                            container.securityContext.capabilities.add[_] == cap
                          }

                          no_read_only_filesystem(c) {
                            not has_field(c, "securityContext")
                          }

                          no_read_only_filesystem(c) {
                            has_field(c, "securityContext")
                            not has_field(c.securityContext, "readOnlyRootFilesystem")
                          }

                          priviledge_escalation_allowed(c) {
                            not has_field(c, "securityContext")
                          }

                          priviledge_escalation_allowed(c) {
                            has_field(c, "securityContext")
                            has_field(c.securityContext, "allowPrivilegeEscalation")
                          }
                        - |-
                          package lib.openshift

                          import data.lib.konstraint

                          is_deploymentconfig {
                            lower(konstraint.object.apiVersion) == "apps.openshift.io/v1"
                            lower(konstraint.object.kind) == "deploymentconfig"
                          }

                          is_route {
                            lower(konstraint.object.apiVersion) == "route.openshift.io/v1"
                            lower(konstraint.object.kind) == "route"
                          }

                          is_workload_kind {
                            is_deploymentconfig
                          }

                          is_workload_kind {
                            konstraint.is_statefulset
                          }

                          is_workload_kind {
                            konstraint.is_daemonset
                          }

                          is_workload_kind {
                            konstraint.is_deployment
                          }

                          is_all_kind {
                            is_workload_kind
                          }

                          is_all_kind {
                            konstraint.is_service
                          }

                          is_all_kind {
                            is_route
                          }

                          pods[pod] {
                            is_deploymentconfig
                            pod = konstraint.object.spec.template
                          }

                          pods[pod] {
                            pod = konstraint.pods[_]
                          }

                          containers[container] {
                            pods[pod]
                            all_containers = konstraint.pod_containers(pod)
                            container = all_containers[_]
                          }

                          containers[container] {
                            container = konstraint.containers[_]
                          }
                      rego: |-
                        package ocp.bestpractices.container_readinessprobe_notset

                        import data.lib.konstraint
                        import data.lib.openshift

                        violation[msg] {
                          openshift.is_workload_kind

                          container := openshift.containers[_]

                          konstraint.missing_field(container, "readinessProbe")
                          obj := konstraint.object

                          msg := konstraint.format(sprintf("%s/%s: container '%s' has no readinessProbe. See: https://docs.openshift.com/container-platform/4.4/applications/application-health.html", [obj.kind, obj.metadata.name, container.name]))
                        }
                      target: admission.k8s.gatekeeper.sh
            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: ContainerReadinessprobeNotset
                metadata:
                  name: containerreadinessprobenotset
                spec:
                  match:
                    kinds:
                      - apiGroups:
                          - apps.openshift.io
                          - apps
                        kinds:
                          - DeploymentConfig
                          - DaemonSet
                          - Deployment
                          - StatefulSet
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-audit-readiness
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: ContainerReadinessprobeNotset
                metadata:
                  name: containerreadinessprobenotset
                status:
                  totalViolations: 0
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-admission-readiness
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          object-templates:
            - complianceType: mustnothave
              objectDefinition:
                apiVersion: v1
                kind: Event
                metadata:
                  namespace: openshift-gatekeeper-system # set it to the actual namespace where gatekeeper is running if different
                  annotations:
                    constraint_action: deny
                    constraint_kind: ContainerReadinessprobeNotset
                    constraint_name: containerreadinessprobenotset
                    event_type: violation
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-policy-gatekeeper-containerreadinessprobenotset
  annotations:
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzZWWVJIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9mVjlRd0FsQ2NYdXdKaDVybTA1NWhpc1RLZTdOdjBEcE5VSzhnQgp5VS9JZ05KYy9jZ1hRMGV1ZElkSEIwQXRvNlhZMjFCTU5QdDBvcE5Xby85eXpOZERtdyt6YjVSdFRjdE5OZFBKCjRwbmtFdmt4NTFPWjdWME9ZT3RTRGRlcjgrK3gwbXp3dVpzQzZTakVreXJISVY4YldLSWlTMVkzOHRlTVkrUGQKODAwdWxSNkpHQzlXZWZ2dTZIWExHcVRNOHZqVUsyQ0dIUXBQbmJWc3FuajJvVnJwTFJYTkNHWngyUXBSVnhybQpWOENXbGJqWmJzT3JoL045WUhwTkRabXRCMHEwdzhmV0U0NVlkN2RGM0VOY0p4NjIvMGpRbDNqc3JQSzdSOHBRCm1JaHc2Wm5aT2xOVkhhT3pjTXoxOFVya21odmFIV0luUys5eXcwcUlnUTVaa2JmTUdZWU5RUlVodFpCeVpCT08KQng3M2pIcFl0eXhsaW5BaDB6K0NOZWRDc2VSQ0g1SGFVQm52THFodENPSjdUYWlPK1UxYktUUHhQVzNkRUNTcQp1Z3BRWW9WNTlGY0lVSk9uaU1BN1ZPWUVLekVzWFM3eUt6amhoNzc2TVNzZ1JnYUtReTNWSk9vTS80Nmt6Umk2Cks3RnVNdWtJcmdETTArVkxwb080RnFhTTNWR054SE1ECj1YTGllCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
placementRef:
  name: placement-policy-gatekeeper-containerreadinessprobenotset
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-gatekeeper-containerreadinessprobenotset
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-policy-gatekeeper-containerreadinessprobenotset
  annotations:
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzZWWVJIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9mVjlRd0FsQ2NYdXdKaDVybTA1NWhpc1RLZTdOdjBEcE5VSzhnQgp5VS9JZ05KYy9jZ1hRMGV1ZElkSEIwQXRvNlhZMjFCTU5QdDBvcE5Xby85eXpOZERtdyt6YjVSdFRjdE5OZFBKCjRwbmtFdmt4NTFPWjdWME9ZT3RTRGRlcjgrK3gwbXp3dVpzQzZTakVreXJISVY4YldLSWlTMVkzOHRlTVkrUGQKODAwdWxSNkpHQzlXZWZ2dTZIWExHcVRNOHZqVUsyQ0dIUXBQbmJWc3FuajJvVnJwTFJYTkNHWngyUXBSVnhybQpWOENXbGJqWmJzT3JoL045WUhwTkRabXRCMHEwdzhmV0U0NVlkN2RGM0VOY0p4NjIvMGpRbDNqc3JQSzdSOHBRCm1JaHc2Wm5aT2xOVkhhT3pjTXoxOFVya21odmFIV0luUys5eXcwcUlnUTVaa2JmTUdZWU5RUlVodFpCeVpCT08KQng3M2pIcFl0eXhsaW5BaDB6K0NOZWRDc2VSQ0g1SGFVQm52THFodENPSjdUYWlPK1UxYktUUHhQVzNkRUNTcQp1Z3BRWW9WNTlGY0lVSk9uaU1BN1ZPWUVLekVzWFM3eUt6amhoNzc2TVNzZ1JnYUtReTNWSk9vTS80Nmt6Umk2Cks3RnVNdWtJcmdETTArVkxwb080RnFhTTNWR054SE1ECj1YTGllCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
spec:
  clusterConditions:
    - status: "True"
      type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - {key: environment, operator: In, values: ["dev"]}
