apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-gatekeeper-containerimagelatest
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzZWa1JIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9kZVV3d0F2UXV5Y1MrS2k4ZzZhbHZmVU1lVHBDcnRFN0Jsc2VOSwpJY1huRlZHM0w5QUdDVFZ6T0ZTVGlERUcxUzRLMVFwZjFkRkRlc0k1TFhEcFQyWHFDUnZGdnFFMkZIWHFnelBSClVJbVFCT1RqbEpZcjRsL2FRRHdubjZITUNMMmZneUpyaU1SQkM1OUZ5c1I4NzVacmxJelo0VlNza0tYMW5aN2QKRGJMUUtrZStXclVSekN3MlFlQm9FTkZ4OWZpZVFvSWtUOEZLNzZSMFJQRS8wTVl2NDFrN1ZRRVQrY3MzZ0ZQOApiMWVmWFNWVmgyRTgzcVhUWmJFeGYrWFRoMnZlMHd0QzNudm42L0JET2JkcFA4ZlRmaEZlL3hDUUV1ZGJvamdQCnhJVXdiUDEyaEFjVHYxWHVGdHFmWGpxc040TE4yYlFpWFMxQkZCVXQwZEZ5TTA4anloT1lCWnJreTJPUkV1S1kKVy9aTXN1SjRnNXZmZ0g2VnlEcFdKd1BxSzI1TTgzUzUxNTA2WWhQeUlxbi8zVG1URWw2YVd0U3lHWVNsQTkrdgp3VGxob0M3QnB4ZUNOUmVGTzdNS2g4dUtrRVBLYjZ5Z2tScEROTklzU1VVZzJ5dnZXNmpua1hGNDJKM2liY0pWCjQ4Y2ZyWUxDK1E0ZmpJbFdweXlDZGlUVHBjL3N3M2Y5Cj1LcFAvCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-containerimagelatest
        spec:
          remediationAction: enforce
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: templates.gatekeeper.sh/v1beta1
                kind: ConstraintTemplate
                metadata:
                  creationTimestamp: null
                  name: containerimagelatest
                spec:
                  crd:
                    spec:
                      names:
                        kind: ContainerImageLatest
                  targets:
                    - libs:
                        - |
                          package lib.konstraint

                          default is_gatekeeper = false

                          is_gatekeeper {
                            has_field(input, "review")
                            has_field(input.review, "object")
                          }

                          object = input {
                            not is_gatekeeper
                          }

                          object = input.review.object {
                            is_gatekeeper
                          }

                          format(msg) = gatekeeper_format {
                            is_gatekeeper
                            gatekeeper_format = {"msg": msg}
                          }

                          format(msg) = msg {
                            not is_gatekeeper
                          }

                          name = object.metadata.name

                          kind = object.kind

                          has_field(obj, field) {
                            obj[field]
                          }

                          missing_field(obj, field) = true {
                            obj[field] == ""
                          }

                          missing_field(obj, field) = true {
                            not has_field(obj, field)
                          }

                          is_service {
                            lower(kind) == "service"
                          }

                          is_statefulset {
                            lower(kind) == "statefulset"
                          }

                          is_daemonset {
                            lower(kind) == "daemonset"
                          }

                          is_deployment {
                            lower(kind) == "deployment"
                          }

                          is_pod {
                            lower(kind) == "pod"
                          }

                          is_namespace {
                            lower(kind) == "namespace"
                          }

                          is_workload {
                            containers[_]
                          }

                          pod_containers(pod) = all_containers {
                            keys = {"containers", "initContainers"}
                            all_containers = [c | keys[k]; c = pod.spec[k][_]]
                          }

                          containers[container] {
                            pods[pod]
                            all_containers = pod_containers(pod)
                            container = all_containers[_]
                          }

                          containers[container] {
                            all_containers = pod_containers(object)
                            container = all_containers[_]
                          }

                          container_images[image] {
                            containers[container]
                            image = container.image
                          }

                          container_images[image] {
                            image = object.spec.image
                          }

                          split_image(image) = [image, "latest"] {
                            not contains(image, ":")
                          }

                          split_image(image) = [image_name, tag] {
                            [image_name, tag] = split(image, ":")
                          }

                          pods[pod] {
                            is_statefulset
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_daemonset
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_deployment
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_pod
                            pod = object
                          }

                          volumes[volume] {
                            pods[pod]
                            volume = pod.spec.volumes[_]
                          }

                          mem_multiple("E") = 1000000000000000000000 { true }

                          mem_multiple("P") = 1000000000000000000 { true }

                          mem_multiple("T") = 1000000000000000 { true }

                          mem_multiple("G") = 1000000000000 { true }

                          mem_multiple("M") = 1000000000 { true }

                          mem_multiple("k") = 1000000 { true }

                          mem_multiple("") = 1000 { true }

                          mem_multiple("m") = 1 { true }

                          mem_multiple("Ki") = 1024000 { true }

                          mem_multiple("Mi") = 1048576000 { true }

                          mem_multiple("Gi") = 1073741824000 { true }

                          mem_multiple("Ti") = 1099511627776000 { true }

                          mem_multiple("Pi") = 1125899906842624000 { true }

                          mem_multiple("Ei") = 1152921504606846976000 { true }

                          get_suffix(mem) = suffix {
                            not is_string(mem)
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 0
                            suffix := substring(mem, count(mem) - 1, -1)
                            mem_multiple(suffix)
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 1
                            suffix := substring(mem, count(mem) - 2, -1)
                            mem_multiple(suffix)
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 1
                            not mem_multiple(substring(mem, count(mem) - 1, -1))
                            not mem_multiple(substring(mem, count(mem) - 2, -1))
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) == 1
                            not mem_multiple(substring(mem, count(mem) - 1, -1))
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) == 0
                            suffix := ""
                          }

                          canonify_mem(orig) = new {
                            is_number(orig)
                            new := orig * 1000
                          }

                          canonify_mem(orig) = new {
                            not is_number(orig)
                            suffix := get_suffix(orig)
                            raw := replace(orig, suffix, "")
                            re_match("^[0-9]+$", raw)
                            new := to_number(raw) * mem_multiple(suffix)
                          }

                          canonify_storage(orig) = new {
                            is_number(orig)
                            new := orig
                          }

                          canonify_storage(orig) = new {
                            not is_number(orig)
                            suffix := get_suffix(orig)
                            raw := replace(orig, suffix, "")
                            re_match("^[0-9]+$", raw)
                            new := to_number(raw) * mem_multiple(suffix)
                          }

                          canonify_cpu(orig) = new {
                            is_number(orig)
                            new := orig * 1000
                          }

                          canonify_cpu(orig) = new {
                            not is_number(orig)
                            endswith(orig, "m")
                            new := to_number(replace(orig, "m", ""))
                          }

                          canonify_cpu(orig) = new {
                            not is_number(orig)
                            not endswith(orig, "m")
                            re_match("^[0-9]+$", orig)
                            new := to_number(orig) * 1000
                          }

                          dropped_capability(container, cap) {
                            container.securityContext.capabilities.drop[_] == cap
                          }

                          added_capability(container, cap) {
                            container.securityContext.capabilities.add[_] == cap
                          }

                          no_read_only_filesystem(c) {
                            not has_field(c, "securityContext")
                          }

                          no_read_only_filesystem(c) {
                            has_field(c, "securityContext")
                            not has_field(c.securityContext, "readOnlyRootFilesystem")
                          }

                          priviledge_escalation_allowed(c) {
                            not has_field(c, "securityContext")
                          }

                          priviledge_escalation_allowed(c) {
                            has_field(c, "securityContext")
                            has_field(c.securityContext, "allowPrivilegeEscalation")
                          }
                        - |-
                          package lib.openshift

                          import data.lib.konstraint

                          is_deploymentconfig {
                            lower(konstraint.object.apiVersion) == "apps.openshift.io/v1"
                            lower(konstraint.object.kind) == "deploymentconfig"
                          }

                          is_route {
                            lower(konstraint.object.apiVersion) == "route.openshift.io/v1"
                            lower(konstraint.object.kind) == "route"
                          }

                          is_workload_kind {
                            is_deploymentconfig
                          }

                          is_workload_kind {
                            konstraint.is_statefulset
                          }

                          is_workload_kind {
                            konstraint.is_daemonset
                          }

                          is_workload_kind {
                            konstraint.is_deployment
                          }

                          is_all_kind {
                            is_workload_kind
                          }

                          is_all_kind {
                            konstraint.is_service
                          }

                          is_all_kind {
                            is_route
                          }

                          pods[pod] {
                            is_deploymentconfig
                            pod = konstraint.object.spec.template
                          }

                          pods[pod] {
                            pod = konstraint.pods[_]
                          }

                          containers[container] {
                            pods[pod]
                            all_containers = konstraint.pod_containers(pod)
                            container = all_containers[_]
                          }

                          containers[container] {
                            container = konstraint.containers[_]
                          }
                      rego: |-
                        package ocp.bestpractices.container_image_latest

                        import data.lib.konstraint
                        import data.lib.openshift

                        violation[msg] {
                          openshift.is_workload_kind

                          container := openshift.containers[_]

                          endswith(container.image, ":latest")
                          obj := konstraint.object

                          msg := konstraint.format(sprintf("%s/%s: container '%s' is using the latest tag for its image (%s), which is an anti-pattern.", [obj.kind, obj.metadata.name, container.name, container.image]))
                        }
                      target: admission.k8s.gatekeeper.sh
            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: ContainerImageLatest
                metadata:
                  name: containerimagelatest
                spec:
                  match:
                    kinds:
                      - apiGroups:
                          - apps.openshift.io
                          - apps
                        kinds:
                          - DeploymentConfig
                          - DaemonSet
                          - Deployment
                          - StatefulSet
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-audit-latest
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: ContainerImageLatest
                metadata:
                  name: containerimagelatest
                status:
                  totalViolations: 0
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-admission-latest
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          object-templates:
            - complianceType: mustnothave
              objectDefinition:
                apiVersion: v1
                kind: Event
                metadata:
                  namespace: openshift-gatekeeper-system # set it to the actual namespace where gatekeeper is running if different
                  annotations:
                    constraint_action: deny
                    constraint_kind: ContainerImageLatest
                    constraint_name: containerimagelatest
                    event_type: violation
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-policy-gatekeeper-containerimagelatest
  annotations:
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzZWa1JIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9kZVV3d0F2UXV5Y1MrS2k4ZzZhbHZmVU1lVHBDcnRFN0Jsc2VOSwpJY1huRlZHM0w5QUdDVFZ6T0ZTVGlERUcxUzRLMVFwZjFkRkRlc0k1TFhEcFQyWHFDUnZGdnFFMkZIWHFnelBSClVJbVFCT1RqbEpZcjRsL2FRRHdubjZITUNMMmZneUpyaU1SQkM1OUZ5c1I4NzVacmxJelo0VlNza0tYMW5aN2QKRGJMUUtrZStXclVSekN3MlFlQm9FTkZ4OWZpZVFvSWtUOEZLNzZSMFJQRS8wTVl2NDFrN1ZRRVQrY3MzZ0ZQOApiMWVmWFNWVmgyRTgzcVhUWmJFeGYrWFRoMnZlMHd0QzNudm42L0JET2JkcFA4ZlRmaEZlL3hDUUV1ZGJvamdQCnhJVXdiUDEyaEFjVHYxWHVGdHFmWGpxc040TE4yYlFpWFMxQkZCVXQwZEZ5TTA4anloT1lCWnJreTJPUkV1S1kKVy9aTXN1SjRnNXZmZ0g2VnlEcFdKd1BxSzI1TTgzUzUxNTA2WWhQeUlxbi8zVG1URWw2YVd0U3lHWVNsQTkrdgp3VGxob0M3QnB4ZUNOUmVGTzdNS2g4dUtrRVBLYjZ5Z2tScEROTklzU1VVZzJ5dnZXNmpua1hGNDJKM2liY0pWCjQ4Y2ZyWUxDK1E0ZmpJbFdweXlDZGlUVHBjL3N3M2Y5Cj1LcFAvCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
placementRef:
  name: placement-policy-gatekeeper-containerimagelatest
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-gatekeeper-containerimagelatest
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-policy-gatekeeper-containerimagelatest
  annotations:
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzZWa1JIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9kZVV3d0F2UXV5Y1MrS2k4ZzZhbHZmVU1lVHBDcnRFN0Jsc2VOSwpJY1huRlZHM0w5QUdDVFZ6T0ZTVGlERUcxUzRLMVFwZjFkRkRlc0k1TFhEcFQyWHFDUnZGdnFFMkZIWHFnelBSClVJbVFCT1RqbEpZcjRsL2FRRHdubjZITUNMMmZneUpyaU1SQkM1OUZ5c1I4NzVacmxJelo0VlNza0tYMW5aN2QKRGJMUUtrZStXclVSekN3MlFlQm9FTkZ4OWZpZVFvSWtUOEZLNzZSMFJQRS8wTVl2NDFrN1ZRRVQrY3MzZ0ZQOApiMWVmWFNWVmgyRTgzcVhUWmJFeGYrWFRoMnZlMHd0QzNudm42L0JET2JkcFA4ZlRmaEZlL3hDUUV1ZGJvamdQCnhJVXdiUDEyaEFjVHYxWHVGdHFmWGpxc040TE4yYlFpWFMxQkZCVXQwZEZ5TTA4anloT1lCWnJreTJPUkV1S1kKVy9aTXN1SjRnNXZmZ0g2VnlEcFdKd1BxSzI1TTgzUzUxNTA2WWhQeUlxbi8zVG1URWw2YVd0U3lHWVNsQTkrdgp3VGxob0M3QnB4ZUNOUmVGTzdNS2g4dUtrRVBLYjZ5Z2tScEROTklzU1VVZzJ5dnZXNmpua1hGNDJKM2liY0pWCjQ4Y2ZyWUxDK1E0ZmpJbFdweXlDZGlUVHBjL3N3M2Y5Cj1LcFAvCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
spec:
  clusterConditions:
    - status: "True"
      type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - {key: environment, operator: In, values: ["dev"]}
