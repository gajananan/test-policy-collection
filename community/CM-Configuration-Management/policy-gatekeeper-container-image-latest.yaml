apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-gatekeeper-containerimagelatest
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzJUWVJIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9lWlhBd0FwQmFwSWhhY3lZUDRYdGpEeFJlNEVYRDM2NjQ4aG5BYQowbG0vUmIzNm1EamJZcW85TElpSVhkZHlsTE41TTA0bDRrU1RkRkl5aVRPQ1VScXpCVWZBdGZ6cm1lVjBiU053CmEzZ3lxN1YyV2gxNmtKS1d3SldmNCthSjFVUUZMY3NqRHI1TFBneXRTclEybWh1R3p6U1J2UnphOW1GUXRxeXQKL0RCb0lhVGptZHp2TVZ3U0MwL0JyR2UwRkltSFVQUFMvMTlBZXZYeTh1bWNVcjEySkJiZmQ5bjNhbHV3OTdyRQpTUTdLaTVobm5MdkhUN3VidENlZWZia2E5SFVacWptdXk4V0NXUEs5MGRVVUl0U0tEQU1VcTZSMzBpS2Q5N0NVCjFxUTN5cElqNmgySWN3clh6ZDBxc29UWmZndWdKUjBvZUY1U21Jd2tPQmNzb0hQQ0U5QTQvRExEU1hNTzBBL1cKUmx5RjAvSlZNK3lQa0UvdlhOU1drUlpXQXd4VjVjTEJvdFJJN3VPeWk5akpEbXBCc3lnTmVtYmdzUlU1bG5YNwpoVktFYjZFWDFKczZVa05kZW84WEUrREJBL1NMWFFreVdiRldFNkNpbDB3QTlHVlNJWDVmamM0RUJtdmhyQ0JYClNRU1Nua0tkc2ZoNW1KNExhQXg5VGxpakxmZEhiUHNTCj1UNE1xCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-containerimagelatest
        spec:
          remediationAction: enforce
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: templates.gatekeeper.sh/v1beta1
                kind: ConstraintTemplate
                metadata:
                  creationTimestamp: null
                  name: containerimagelatest
                spec:
                  crd:
                    spec:
                      names:
                        kind: ContainerImageLatest
                  targets:
                    - libs:
                        - |
                          package lib.konstraint

                          default is_gatekeeper = false

                          is_gatekeeper {
                            has_field(input, "review")
                            has_field(input.review, "object")
                          }

                          object = input {
                            not is_gatekeeper
                          }

                          object = input.review.object {
                            is_gatekeeper
                          }

                          format(msg) = gatekeeper_format {
                            is_gatekeeper
                            gatekeeper_format = {"msg": msg}
                          }

                          format(msg) = msg {
                            not is_gatekeeper
                          }

                          name = object.metadata.name

                          kind = object.kind

                          has_field(obj, field) {
                            obj[field]
                          }

                          missing_field(obj, field) = true {
                            obj[field] == ""
                          }

                          missing_field(obj, field) = true {
                            not has_field(obj, field)
                          }

                          is_service {
                            lower(kind) == "service"
                          }

                          is_statefulset {
                            lower(kind) == "statefulset"
                          }

                          is_daemonset {
                            lower(kind) == "daemonset"
                          }

                          is_deployment {
                            lower(kind) == "deployment"
                          }

                          is_pod {
                            lower(kind) == "pod"
                          }

                          is_namespace {
                            lower(kind) == "namespace"
                          }

                          is_workload {
                            containers[_]
                          }

                          pod_containers(pod) = all_containers {
                            keys = {"containers", "initContainers"}
                            all_containers = [c | keys[k]; c = pod.spec[k][_]]
                          }

                          containers[container] {
                            pods[pod]
                            all_containers = pod_containers(pod)
                            container = all_containers[_]
                          }

                          containers[container] {
                            all_containers = pod_containers(object)
                            container = all_containers[_]
                          }

                          container_images[image] {
                            containers[container]
                            image = container.image
                          }

                          container_images[image] {
                            image = object.spec.image
                          }

                          split_image(image) = [image, "latest"] {
                            not contains(image, ":")
                          }

                          split_image(image) = [image_name, tag] {
                            [image_name, tag] = split(image, ":")
                          }

                          pods[pod] {
                            is_statefulset
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_daemonset
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_deployment
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_pod
                            pod = object
                          }

                          volumes[volume] {
                            pods[pod]
                            volume = pod.spec.volumes[_]
                          }

                          mem_multiple("E") = 1000000000000000000000 { true }

                          mem_multiple("P") = 1000000000000000000 { true }

                          mem_multiple("T") = 1000000000000000 { true }

                          mem_multiple("G") = 1000000000000 { true }

                          mem_multiple("M") = 1000000000 { true }

                          mem_multiple("k") = 1000000 { true }

                          mem_multiple("") = 1000 { true }

                          mem_multiple("m") = 1 { true }

                          mem_multiple("Ki") = 1024000 { true }

                          mem_multiple("Mi") = 1048576000 { true }

                          mem_multiple("Gi") = 1073741824000 { true }

                          mem_multiple("Ti") = 1099511627776000 { true }

                          mem_multiple("Pi") = 1125899906842624000 { true }

                          mem_multiple("Ei") = 1152921504606846976000 { true }

                          get_suffix(mem) = suffix {
                            not is_string(mem)
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 0
                            suffix := substring(mem, count(mem) - 1, -1)
                            mem_multiple(suffix)
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 1
                            suffix := substring(mem, count(mem) - 2, -1)
                            mem_multiple(suffix)
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 1
                            not mem_multiple(substring(mem, count(mem) - 1, -1))
                            not mem_multiple(substring(mem, count(mem) - 2, -1))
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) == 1
                            not mem_multiple(substring(mem, count(mem) - 1, -1))
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) == 0
                            suffix := ""
                          }

                          canonify_mem(orig) = new {
                            is_number(orig)
                            new := orig * 1000
                          }

                          canonify_mem(orig) = new {
                            not is_number(orig)
                            suffix := get_suffix(orig)
                            raw := replace(orig, suffix, "")
                            re_match("^[0-9]+$", raw)
                            new := to_number(raw) * mem_multiple(suffix)
                          }

                          canonify_storage(orig) = new {
                            is_number(orig)
                            new := orig
                          }

                          canonify_storage(orig) = new {
                            not is_number(orig)
                            suffix := get_suffix(orig)
                            raw := replace(orig, suffix, "")
                            re_match("^[0-9]+$", raw)
                            new := to_number(raw) * mem_multiple(suffix)
                          }

                          canonify_cpu(orig) = new {
                            is_number(orig)
                            new := orig * 1000
                          }

                          canonify_cpu(orig) = new {
                            not is_number(orig)
                            endswith(orig, "m")
                            new := to_number(replace(orig, "m", ""))
                          }

                          canonify_cpu(orig) = new {
                            not is_number(orig)
                            not endswith(orig, "m")
                            re_match("^[0-9]+$", orig)
                            new := to_number(orig) * 1000
                          }

                          dropped_capability(container, cap) {
                            container.securityContext.capabilities.drop[_] == cap
                          }

                          added_capability(container, cap) {
                            container.securityContext.capabilities.add[_] == cap
                          }

                          no_read_only_filesystem(c) {
                            not has_field(c, "securityContext")
                          }

                          no_read_only_filesystem(c) {
                            has_field(c, "securityContext")
                            not has_field(c.securityContext, "readOnlyRootFilesystem")
                          }

                          priviledge_escalation_allowed(c) {
                            not has_field(c, "securityContext")
                          }

                          priviledge_escalation_allowed(c) {
                            has_field(c, "securityContext")
                            has_field(c.securityContext, "allowPrivilegeEscalation")
                          }
                        - |-
                          package lib.openshift

                          import data.lib.konstraint

                          is_deploymentconfig {
                            lower(konstraint.object.apiVersion) == "apps.openshift.io/v1"
                            lower(konstraint.object.kind) == "deploymentconfig"
                          }

                          is_route {
                            lower(konstraint.object.apiVersion) == "route.openshift.io/v1"
                            lower(konstraint.object.kind) == "route"
                          }

                          is_workload_kind {
                            is_deploymentconfig
                          }

                          is_workload_kind {
                            konstraint.is_statefulset
                          }

                          is_workload_kind {
                            konstraint.is_daemonset
                          }

                          is_workload_kind {
                            konstraint.is_deployment
                          }

                          is_all_kind {
                            is_workload_kind
                          }

                          is_all_kind {
                            konstraint.is_service
                          }

                          is_all_kind {
                            is_route
                          }

                          pods[pod] {
                            is_deploymentconfig
                            pod = konstraint.object.spec.template
                          }

                          pods[pod] {
                            pod = konstraint.pods[_]
                          }

                          containers[container] {
                            pods[pod]
                            all_containers = konstraint.pod_containers(pod)
                            container = all_containers[_]
                          }

                          containers[container] {
                            container = konstraint.containers[_]
                          }
                      rego: |-
                        package ocp.bestpractices.container_image_latest

                        import data.lib.konstraint
                        import data.lib.openshift

                        violation[msg] {
                          openshift.is_workload_kind

                          container := openshift.containers[_]

                          endswith(container.image, ":latest")
                          obj := konstraint.object

                          msg := konstraint.format(sprintf("%s/%s: container '%s' is using the latest tag for its image (%s), which is an anti-pattern.", [obj.kind, obj.metadata.name, container.name, container.image]))
                        }
                      target: admission.k8s.gatekeeper.sh
            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: ContainerImageLatest
                metadata:
                  name: containerimagelatest
                spec:
                  match:
                    kinds:
                      - apiGroups:
                          - apps.openshift.io
                          - apps
                        kinds:
                          - DeploymentConfig
                          - DaemonSet
                          - Deployment
                          - StatefulSet
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-audit-latest
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: ContainerImageLatest
                metadata:
                  name: containerimagelatest
                status:
                  totalViolations: 0
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-admission-latest
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          object-templates:
            - complianceType: mustnothave
              objectDefinition:
                apiVersion: v1
                kind: Event
                metadata:
                  namespace: openshift-gatekeeper-system # set it to the actual namespace where gatekeeper is running if different
                  annotations:
                    constraint_action: deny
                    constraint_kind: ContainerImageLatest
                    constraint_name: containerimagelatest
                    event_type: violation
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-policy-gatekeeper-containerimagelatest
  annotations:
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzJUWVJIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9lWlhBd0FwQmFwSWhhY3lZUDRYdGpEeFJlNEVYRDM2NjQ4aG5BYQowbG0vUmIzNm1EamJZcW85TElpSVhkZHlsTE41TTA0bDRrU1RkRkl5aVRPQ1VScXpCVWZBdGZ6cm1lVjBiU053CmEzZ3lxN1YyV2gxNmtKS1d3SldmNCthSjFVUUZMY3NqRHI1TFBneXRTclEybWh1R3p6U1J2UnphOW1GUXRxeXQKL0RCb0lhVGptZHp2TVZ3U0MwL0JyR2UwRkltSFVQUFMvMTlBZXZYeTh1bWNVcjEySkJiZmQ5bjNhbHV3OTdyRQpTUTdLaTVobm5MdkhUN3VidENlZWZia2E5SFVacWptdXk4V0NXUEs5MGRVVUl0U0tEQU1VcTZSMzBpS2Q5N0NVCjFxUTN5cElqNmgySWN3clh6ZDBxc29UWmZndWdKUjBvZUY1U21Jd2tPQmNzb0hQQ0U5QTQvRExEU1hNTzBBL1cKUmx5RjAvSlZNK3lQa0UvdlhOU1drUlpXQXd4VjVjTEJvdFJJN3VPeWk5akpEbXBCc3lnTmVtYmdzUlU1bG5YNwpoVktFYjZFWDFKczZVa05kZW84WEUrREJBL1NMWFFreVdiRldFNkNpbDB3QTlHVlNJWDVmamM0RUJtdmhyQ0JYClNRU1Nua0tkc2ZoNW1KNExhQXg5VGxpakxmZEhiUHNTCj1UNE1xCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
placementRef:
  name: placement-policy-gatekeeper-containerimagelatest
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-gatekeeper-containerimagelatest
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-policy-gatekeeper-containerimagelatest
  annotations:
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzJUWVJIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9lWlhBd0FwQmFwSWhhY3lZUDRYdGpEeFJlNEVYRDM2NjQ4aG5BYQowbG0vUmIzNm1EamJZcW85TElpSVhkZHlsTE41TTA0bDRrU1RkRkl5aVRPQ1VScXpCVWZBdGZ6cm1lVjBiU053CmEzZ3lxN1YyV2gxNmtKS1d3SldmNCthSjFVUUZMY3NqRHI1TFBneXRTclEybWh1R3p6U1J2UnphOW1GUXRxeXQKL0RCb0lhVGptZHp2TVZ3U0MwL0JyR2UwRkltSFVQUFMvMTlBZXZYeTh1bWNVcjEySkJiZmQ5bjNhbHV3OTdyRQpTUTdLaTVobm5MdkhUN3VidENlZWZia2E5SFVacWptdXk4V0NXUEs5MGRVVUl0U0tEQU1VcTZSMzBpS2Q5N0NVCjFxUTN5cElqNmgySWN3clh6ZDBxc29UWmZndWdKUjBvZUY1U21Jd2tPQmNzb0hQQ0U5QTQvRExEU1hNTzBBL1cKUmx5RjAvSlZNK3lQa0UvdlhOU1drUlpXQXd4VjVjTEJvdFJJN3VPeWk5akpEbXBCc3lnTmVtYmdzUlU1bG5YNwpoVktFYjZFWDFKczZVa05kZW84WEUrREJBL1NMWFFreVdiRldFNkNpbDB3QTlHVlNJWDVmamM0RUJtdmhyQ0JYClNRU1Nua0tkc2ZoNW1KNExhQXg5VGxpakxmZEhiUHNTCj1UNE1xCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
spec:
  clusterConditions:
    - status: "True"
      type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - {key: environment, operator: In, values: ["dev"]}
