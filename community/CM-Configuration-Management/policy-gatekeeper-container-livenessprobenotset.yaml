apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-gatekeeper-containerlivenessprobenotset
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzJUUVJIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9lbjl3di9TcVVkZEZteWZQZ3pSektBUFhHcGFSc2hDRnJVOGFNOQpzQy9PZS9yWkRza0tQSk5IeEl3MENDU3M3MzA2SUNUOGcycllmQmI4WjFxYnljVVJYdmIxbGhRWks5bDVIT2ZVCi9wQjkvUHJvNDZwN3gyNmVZSnJQeUxLK0pEOVVOOWRrZDRDYjBVbXFRbW1NN3c3NEM2SkQwOHNGU2ttTFVPdWEKWGY4cmk1SnluMTdtZUYzZ3IvNW9GQlYyLzdNOVoxWStNbGZ5dHY1dU4zcURaOGlhMW5vQnRWdjJ2b1BEeGtubApZZWdDd1pMYWp5QlkxdXZCRlByWjNsSk94bEttSDBBT3lOT2tRRmJnd3FyVmUxVC9ka0JKTWl3azVqZmluVjNnClhCU3FYOXpJb3B6cTFuNnRLSkxYYzdKTmVBbjBlVENwQWR2SS9Jc3AwVzhseGowdnVsU0dHZE9OckpYbHFpaVMKekg1QXFWQW1ya1krdE1qeTVJalE5UFBPWHplOHhCdlVVNHZzTVBXMzV4WmdEMFc4eDhFR2d5THNCOWhxU1BVcwpjQThoMHZWTnlsZ0MzQXVKQWtvSjg0L1VHRG9LZXJCTmJlOU00SGpDM1NFOWZldU42Q2tzMHIzWUFWK09UbWNXCm93Ykx4R1FRdjNjTnQ0Q0lpUjR4MkZldWFIRm5jcTRLCj1EY01yCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-containerlivenessprobenotset
        spec:
          remediationAction: enforce
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: templates.gatekeeper.sh/v1beta1
                kind: ConstraintTemplate
                metadata:
                  creationTimestamp: null
                  name: containerlivenessprobenotset
                spec:
                  crd:
                    spec:
                      names:
                        kind: ContainerLivenessprobeNotset
                  targets:
                    - libs:
                        - |
                          package lib.konstraint

                          default is_gatekeeper = false

                          is_gatekeeper {
                            has_field(input, "review")
                            has_field(input.review, "object")
                          }

                          object = input {
                            not is_gatekeeper
                          }

                          object = input.review.object {
                            is_gatekeeper
                          }

                          format(msg) = gatekeeper_format {
                            is_gatekeeper
                            gatekeeper_format = {"msg": msg}
                          }

                          format(msg) = msg {
                            not is_gatekeeper
                          }

                          name = object.metadata.name

                          kind = object.kind

                          has_field(obj, field) {
                            obj[field]
                          }

                          missing_field(obj, field) = true {
                            obj[field] == ""
                          }

                          missing_field(obj, field) = true {
                            not has_field(obj, field)
                          }

                          is_service {
                            lower(kind) == "service"
                          }

                          is_statefulset {
                            lower(kind) == "statefulset"
                          }

                          is_daemonset {
                            lower(kind) == "daemonset"
                          }

                          is_deployment {
                            lower(kind) == "deployment"
                          }

                          is_pod {
                            lower(kind) == "pod"
                          }

                          is_namespace {
                            lower(kind) == "namespace"
                          }

                          is_workload {
                            containers[_]
                          }

                          pod_containers(pod) = all_containers {
                            keys = {"containers", "initContainers"}
                            all_containers = [c | keys[k]; c = pod.spec[k][_]]
                          }

                          containers[container] {
                            pods[pod]
                            all_containers = pod_containers(pod)
                            container = all_containers[_]
                          }

                          containers[container] {
                            all_containers = pod_containers(object)
                            container = all_containers[_]
                          }

                          container_images[image] {
                            containers[container]
                            image = container.image
                          }

                          container_images[image] {
                            image = object.spec.image
                          }

                          split_image(image) = [image, "latest"] {
                            not contains(image, ":")
                          }

                          split_image(image) = [image_name, tag] {
                            [image_name, tag] = split(image, ":")
                          }

                          pods[pod] {
                            is_statefulset
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_daemonset
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_deployment
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_pod
                            pod = object
                          }

                          volumes[volume] {
                            pods[pod]
                            volume = pod.spec.volumes[_]
                          }

                          mem_multiple("E") = 1000000000000000000000 { true }

                          mem_multiple("P") = 1000000000000000000 { true }

                          mem_multiple("T") = 1000000000000000 { true }

                          mem_multiple("G") = 1000000000000 { true }

                          mem_multiple("M") = 1000000000 { true }

                          mem_multiple("k") = 1000000 { true }

                          mem_multiple("") = 1000 { true }

                          mem_multiple("m") = 1 { true }

                          mem_multiple("Ki") = 1024000 { true }

                          mem_multiple("Mi") = 1048576000 { true }

                          mem_multiple("Gi") = 1073741824000 { true }

                          mem_multiple("Ti") = 1099511627776000 { true }

                          mem_multiple("Pi") = 1125899906842624000 { true }

                          mem_multiple("Ei") = 1152921504606846976000 { true }

                          get_suffix(mem) = suffix {
                            not is_string(mem)
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 0
                            suffix := substring(mem, count(mem) - 1, -1)
                            mem_multiple(suffix)
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 1
                            suffix := substring(mem, count(mem) - 2, -1)
                            mem_multiple(suffix)
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 1
                            not mem_multiple(substring(mem, count(mem) - 1, -1))
                            not mem_multiple(substring(mem, count(mem) - 2, -1))
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) == 1
                            not mem_multiple(substring(mem, count(mem) - 1, -1))
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) == 0
                            suffix := ""
                          }

                          canonify_mem(orig) = new {
                            is_number(orig)
                            new := orig * 1000
                          }

                          canonify_mem(orig) = new {
                            not is_number(orig)
                            suffix := get_suffix(orig)
                            raw := replace(orig, suffix, "")
                            re_match("^[0-9]+$", raw)
                            new := to_number(raw) * mem_multiple(suffix)
                          }

                          canonify_storage(orig) = new {
                            is_number(orig)
                            new := orig
                          }

                          canonify_storage(orig) = new {
                            not is_number(orig)
                            suffix := get_suffix(orig)
                            raw := replace(orig, suffix, "")
                            re_match("^[0-9]+$", raw)
                            new := to_number(raw) * mem_multiple(suffix)
                          }

                          canonify_cpu(orig) = new {
                            is_number(orig)
                            new := orig * 1000
                          }

                          canonify_cpu(orig) = new {
                            not is_number(orig)
                            endswith(orig, "m")
                            new := to_number(replace(orig, "m", ""))
                          }

                          canonify_cpu(orig) = new {
                            not is_number(orig)
                            not endswith(orig, "m")
                            re_match("^[0-9]+$", orig)
                            new := to_number(orig) * 1000
                          }

                          dropped_capability(container, cap) {
                            container.securityContext.capabilities.drop[_] == cap
                          }

                          added_capability(container, cap) {
                            container.securityContext.capabilities.add[_] == cap
                          }

                          no_read_only_filesystem(c) {
                            not has_field(c, "securityContext")
                          }

                          no_read_only_filesystem(c) {
                            has_field(c, "securityContext")
                            not has_field(c.securityContext, "readOnlyRootFilesystem")
                          }

                          priviledge_escalation_allowed(c) {
                            not has_field(c, "securityContext")
                          }

                          priviledge_escalation_allowed(c) {
                            has_field(c, "securityContext")
                            has_field(c.securityContext, "allowPrivilegeEscalation")
                          }
                        - |-
                          package lib.openshift

                          import data.lib.konstraint

                          is_deploymentconfig {
                            lower(konstraint.object.apiVersion) == "apps.openshift.io/v1"
                            lower(konstraint.object.kind) == "deploymentconfig"
                          }

                          is_route {
                            lower(konstraint.object.apiVersion) == "route.openshift.io/v1"
                            lower(konstraint.object.kind) == "route"
                          }

                          is_workload_kind {
                            is_deploymentconfig
                          }

                          is_workload_kind {
                            konstraint.is_statefulset
                          }

                          is_workload_kind {
                            konstraint.is_daemonset
                          }

                          is_workload_kind {
                            konstraint.is_deployment
                          }

                          is_all_kind {
                            is_workload_kind
                          }

                          is_all_kind {
                            konstraint.is_service
                          }

                          is_all_kind {
                            is_route
                          }

                          pods[pod] {
                            is_deploymentconfig
                            pod = konstraint.object.spec.template
                          }

                          pods[pod] {
                            pod = konstraint.pods[_]
                          }

                          containers[container] {
                            pods[pod]
                            all_containers = konstraint.pod_containers(pod)
                            container = all_containers[_]
                          }

                          containers[container] {
                            container = konstraint.containers[_]
                          }
                      rego: |-
                        package ocp.bestpractices.container_livenessprobe_notset

                        import data.lib.konstraint
                        import data.lib.openshift

                        violation[msg] {
                          openshift.is_workload_kind

                          container := openshift.containers[_]

                          konstraint.missing_field(container, "livenessProbe")
                          obj := konstraint.object

                          msg := konstraint.format(sprintf("%s/%s: container '%s' has no livenessProbe. See: https://docs.openshift.com/container-platform/latest/applications/application-health.html", [obj.kind, obj.metadata.name, container.name]))
                        }
                      target: admission.k8s.gatekeeper.sh
            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: ContainerLivenessprobeNotset
                metadata:
                  name: containerlivenessprobenotset
                spec:
                  match:
                    kinds:
                      - apiGroups:
                          - apps.openshift.io
                          - apps
                        kinds:
                          - DeploymentConfig
                          - DaemonSet
                          - Deployment
                          - StatefulSet
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-audit-liveness
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: ContainerLivenessprobeNotset
                metadata:
                  name: containerlivenessprobenotset
                status:
                  totalViolations: 0
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-admission-liveness
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          object-templates:
            - complianceType: mustnothave
              objectDefinition:
                apiVersion: v1
                kind: Event
                metadata:
                  namespace: openshift-gatekeeper-system # set it to the actual namespace where gatekeeper is running if different
                  annotations:
                    constraint_action: deny
                    constraint_kind: ContainerLivenessprobeNotset
                    constraint_name: containerlivenessprobenotset
                    event_type: violation
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-policy-gatekeeper-containerlivenessprobenotset
  annotations:
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzJUUVJIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9lbjl3di9TcVVkZEZteWZQZ3pSektBUFhHcGFSc2hDRnJVOGFNOQpzQy9PZS9yWkRza0tQSk5IeEl3MENDU3M3MzA2SUNUOGcycllmQmI4WjFxYnljVVJYdmIxbGhRWks5bDVIT2ZVCi9wQjkvUHJvNDZwN3gyNmVZSnJQeUxLK0pEOVVOOWRrZDRDYjBVbXFRbW1NN3c3NEM2SkQwOHNGU2ttTFVPdWEKWGY4cmk1SnluMTdtZUYzZ3IvNW9GQlYyLzdNOVoxWStNbGZ5dHY1dU4zcURaOGlhMW5vQnRWdjJ2b1BEeGtubApZZWdDd1pMYWp5QlkxdXZCRlByWjNsSk94bEttSDBBT3lOT2tRRmJnd3FyVmUxVC9ka0JKTWl3azVqZmluVjNnClhCU3FYOXpJb3B6cTFuNnRLSkxYYzdKTmVBbjBlVENwQWR2SS9Jc3AwVzhseGowdnVsU0dHZE9OckpYbHFpaVMKekg1QXFWQW1ya1krdE1qeTVJalE5UFBPWHplOHhCdlVVNHZzTVBXMzV4WmdEMFc4eDhFR2d5THNCOWhxU1BVcwpjQThoMHZWTnlsZ0MzQXVKQWtvSjg0L1VHRG9LZXJCTmJlOU00SGpDM1NFOWZldU42Q2tzMHIzWUFWK09UbWNXCm93Ykx4R1FRdjNjTnQ0Q0lpUjR4MkZldWFIRm5jcTRLCj1EY01yCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
placementRef:
  name: placement-policy-gatekeeper-containerlivenessprobenotset
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-gatekeeper-containerlivenessprobenotset
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-policy-gatekeeper-containerlivenessprobenotset
  annotations:
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzJUUVJIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9lbjl3di9TcVVkZEZteWZQZ3pSektBUFhHcGFSc2hDRnJVOGFNOQpzQy9PZS9yWkRza0tQSk5IeEl3MENDU3M3MzA2SUNUOGcycllmQmI4WjFxYnljVVJYdmIxbGhRWks5bDVIT2ZVCi9wQjkvUHJvNDZwN3gyNmVZSnJQeUxLK0pEOVVOOWRrZDRDYjBVbXFRbW1NN3c3NEM2SkQwOHNGU2ttTFVPdWEKWGY4cmk1SnluMTdtZUYzZ3IvNW9GQlYyLzdNOVoxWStNbGZ5dHY1dU4zcURaOGlhMW5vQnRWdjJ2b1BEeGtubApZZWdDd1pMYWp5QlkxdXZCRlByWjNsSk94bEttSDBBT3lOT2tRRmJnd3FyVmUxVC9ka0JKTWl3azVqZmluVjNnClhCU3FYOXpJb3B6cTFuNnRLSkxYYzdKTmVBbjBlVENwQWR2SS9Jc3AwVzhseGowdnVsU0dHZE9OckpYbHFpaVMKekg1QXFWQW1ya1krdE1qeTVJalE5UFBPWHplOHhCdlVVNHZzTVBXMzV4WmdEMFc4eDhFR2d5THNCOWhxU1BVcwpjQThoMHZWTnlsZ0MzQXVKQWtvSjg0L1VHRG9LZXJCTmJlOU00SGpDM1NFOWZldU42Q2tzMHIzWUFWK09UbWNXCm93Ykx4R1FRdjNjTnQ0Q0lpUjR4MkZldWFIRm5jcTRLCj1EY01yCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
spec:
  clusterConditions:
    - status: "True"
      type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - {key: environment, operator: In, values: ["dev"]}
