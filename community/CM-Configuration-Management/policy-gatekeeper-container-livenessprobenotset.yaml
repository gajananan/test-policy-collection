apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-gatekeeper-containerlivenessprobenotset
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzZWZ1JIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9ld3VndjlFZ3JxTWhKV1I0Y3V4aWd2UFVZMDZMSDVBZW1MVXlSYQpQMUhvK0RxQ1A0UitPMHEwdDlyaGtsUXFQaERsRFRzbVFONXdhckJnenR4WmV3QkJSTjc5YVNTUmFxSXRZSVdyCkdQdFFFUUFEVXpPWUtkREtxSjNTTDhldXZIemY1UHFtbXFTdUtqdHVTYmRrdW5BbHlVSy9MUVRqSjJpZllrVzcKTDdBOTN5ZUx4eTZTN0plcGx3WTErNnlnM2hHMHFTc2lyZm1iVGt6Znk2YWpXZFBmdHdpUWFkZ0FtRnZJSFAvMgpDRFBsWUZGRkx1Y0VnRG5pSDdIQnpwOVN4aUg3K0NyRVRZWENIOVFBQ2NpU3cyT2RiL05UUlY0QjMwaG5pOVpYCkJjNWZ2OEpnMHBVZDNrM2l3bUlDWjZaTzlFeDlYZlQ0bFR6NWJjM0VpR1MzTk1lWG1FRWJ6a1NtZythaGNjdnkKcDlnYjlNMTVRWVJlUk1pakk0OXZleStpcmpaVFBaeWRHRDJWSGYxYzN1MGtQaE16OHlnZnpDQ3lMRVhPeitUeQpoVU9IVFpYYU5ZcmM0N0pWM0pNOUJkbDFwVVRRQXBNNTRVekJXT0Q1MjBNbWgyQWRSSldNNHg0VlFiQUJxbzZDCkhucGtERHFJYy9Pc1lqOTY1OG5VZ0RHYmxabFdTWk5OCj1weFQ5Ci0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-containerlivenessprobenotset
        spec:
          remediationAction: enforce
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: templates.gatekeeper.sh/v1beta1
                kind: ConstraintTemplate
                metadata:
                  creationTimestamp: null
                  name: containerlivenessprobenotset
                spec:
                  crd:
                    spec:
                      names:
                        kind: ContainerLivenessprobeNotset
                  targets:
                    - libs:
                        - |
                          package lib.konstraint

                          default is_gatekeeper = false

                          is_gatekeeper {
                            has_field(input, "review")
                            has_field(input.review, "object")
                          }

                          object = input {
                            not is_gatekeeper
                          }

                          object = input.review.object {
                            is_gatekeeper
                          }

                          format(msg) = gatekeeper_format {
                            is_gatekeeper
                            gatekeeper_format = {"msg": msg}
                          }

                          format(msg) = msg {
                            not is_gatekeeper
                          }

                          name = object.metadata.name

                          kind = object.kind

                          has_field(obj, field) {
                            obj[field]
                          }

                          missing_field(obj, field) = true {
                            obj[field] == ""
                          }

                          missing_field(obj, field) = true {
                            not has_field(obj, field)
                          }

                          is_service {
                            lower(kind) == "service"
                          }

                          is_statefulset {
                            lower(kind) == "statefulset"
                          }

                          is_daemonset {
                            lower(kind) == "daemonset"
                          }

                          is_deployment {
                            lower(kind) == "deployment"
                          }

                          is_pod {
                            lower(kind) == "pod"
                          }

                          is_namespace {
                            lower(kind) == "namespace"
                          }

                          is_workload {
                            containers[_]
                          }

                          pod_containers(pod) = all_containers {
                            keys = {"containers", "initContainers"}
                            all_containers = [c | keys[k]; c = pod.spec[k][_]]
                          }

                          containers[container] {
                            pods[pod]
                            all_containers = pod_containers(pod)
                            container = all_containers[_]
                          }

                          containers[container] {
                            all_containers = pod_containers(object)
                            container = all_containers[_]
                          }

                          container_images[image] {
                            containers[container]
                            image = container.image
                          }

                          container_images[image] {
                            image = object.spec.image
                          }

                          split_image(image) = [image, "latest"] {
                            not contains(image, ":")
                          }

                          split_image(image) = [image_name, tag] {
                            [image_name, tag] = split(image, ":")
                          }

                          pods[pod] {
                            is_statefulset
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_daemonset
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_deployment
                            pod = object.spec.template
                          }

                          pods[pod] {
                            is_pod
                            pod = object
                          }

                          volumes[volume] {
                            pods[pod]
                            volume = pod.spec.volumes[_]
                          }

                          mem_multiple("E") = 1000000000000000000000 { true }

                          mem_multiple("P") = 1000000000000000000 { true }

                          mem_multiple("T") = 1000000000000000 { true }

                          mem_multiple("G") = 1000000000000 { true }

                          mem_multiple("M") = 1000000000 { true }

                          mem_multiple("k") = 1000000 { true }

                          mem_multiple("") = 1000 { true }

                          mem_multiple("m") = 1 { true }

                          mem_multiple("Ki") = 1024000 { true }

                          mem_multiple("Mi") = 1048576000 { true }

                          mem_multiple("Gi") = 1073741824000 { true }

                          mem_multiple("Ti") = 1099511627776000 { true }

                          mem_multiple("Pi") = 1125899906842624000 { true }

                          mem_multiple("Ei") = 1152921504606846976000 { true }

                          get_suffix(mem) = suffix {
                            not is_string(mem)
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 0
                            suffix := substring(mem, count(mem) - 1, -1)
                            mem_multiple(suffix)
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 1
                            suffix := substring(mem, count(mem) - 2, -1)
                            mem_multiple(suffix)
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) > 1
                            not mem_multiple(substring(mem, count(mem) - 1, -1))
                            not mem_multiple(substring(mem, count(mem) - 2, -1))
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) == 1
                            not mem_multiple(substring(mem, count(mem) - 1, -1))
                            suffix := ""
                          }

                          get_suffix(mem) = suffix {
                            is_string(mem)
                            count(mem) == 0
                            suffix := ""
                          }

                          canonify_mem(orig) = new {
                            is_number(orig)
                            new := orig * 1000
                          }

                          canonify_mem(orig) = new {
                            not is_number(orig)
                            suffix := get_suffix(orig)
                            raw := replace(orig, suffix, "")
                            re_match("^[0-9]+$", raw)
                            new := to_number(raw) * mem_multiple(suffix)
                          }

                          canonify_storage(orig) = new {
                            is_number(orig)
                            new := orig
                          }

                          canonify_storage(orig) = new {
                            not is_number(orig)
                            suffix := get_suffix(orig)
                            raw := replace(orig, suffix, "")
                            re_match("^[0-9]+$", raw)
                            new := to_number(raw) * mem_multiple(suffix)
                          }

                          canonify_cpu(orig) = new {
                            is_number(orig)
                            new := orig * 1000
                          }

                          canonify_cpu(orig) = new {
                            not is_number(orig)
                            endswith(orig, "m")
                            new := to_number(replace(orig, "m", ""))
                          }

                          canonify_cpu(orig) = new {
                            not is_number(orig)
                            not endswith(orig, "m")
                            re_match("^[0-9]+$", orig)
                            new := to_number(orig) * 1000
                          }

                          dropped_capability(container, cap) {
                            container.securityContext.capabilities.drop[_] == cap
                          }

                          added_capability(container, cap) {
                            container.securityContext.capabilities.add[_] == cap
                          }

                          no_read_only_filesystem(c) {
                            not has_field(c, "securityContext")
                          }

                          no_read_only_filesystem(c) {
                            has_field(c, "securityContext")
                            not has_field(c.securityContext, "readOnlyRootFilesystem")
                          }

                          priviledge_escalation_allowed(c) {
                            not has_field(c, "securityContext")
                          }

                          priviledge_escalation_allowed(c) {
                            has_field(c, "securityContext")
                            has_field(c.securityContext, "allowPrivilegeEscalation")
                          }
                        - |-
                          package lib.openshift

                          import data.lib.konstraint

                          is_deploymentconfig {
                            lower(konstraint.object.apiVersion) == "apps.openshift.io/v1"
                            lower(konstraint.object.kind) == "deploymentconfig"
                          }

                          is_route {
                            lower(konstraint.object.apiVersion) == "route.openshift.io/v1"
                            lower(konstraint.object.kind) == "route"
                          }

                          is_workload_kind {
                            is_deploymentconfig
                          }

                          is_workload_kind {
                            konstraint.is_statefulset
                          }

                          is_workload_kind {
                            konstraint.is_daemonset
                          }

                          is_workload_kind {
                            konstraint.is_deployment
                          }

                          is_all_kind {
                            is_workload_kind
                          }

                          is_all_kind {
                            konstraint.is_service
                          }

                          is_all_kind {
                            is_route
                          }

                          pods[pod] {
                            is_deploymentconfig
                            pod = konstraint.object.spec.template
                          }

                          pods[pod] {
                            pod = konstraint.pods[_]
                          }

                          containers[container] {
                            pods[pod]
                            all_containers = konstraint.pod_containers(pod)
                            container = all_containers[_]
                          }

                          containers[container] {
                            container = konstraint.containers[_]
                          }
                      rego: |-
                        package ocp.bestpractices.container_livenessprobe_notset

                        import data.lib.konstraint
                        import data.lib.openshift

                        violation[msg] {
                          openshift.is_workload_kind

                          container := openshift.containers[_]

                          konstraint.missing_field(container, "livenessProbe")
                          obj := konstraint.object

                          msg := konstraint.format(sprintf("%s/%s: container '%s' has no livenessProbe. See: https://docs.openshift.com/container-platform/latest/applications/application-health.html", [obj.kind, obj.metadata.name, container.name]))
                        }
                      target: admission.k8s.gatekeeper.sh
            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: ContainerLivenessprobeNotset
                metadata:
                  name: containerlivenessprobenotset
                spec:
                  match:
                    kinds:
                      - apiGroups:
                          - apps.openshift.io
                          - apps
                        kinds:
                          - DeploymentConfig
                          - DaemonSet
                          - Deployment
                          - StatefulSet
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-audit-liveness
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: constraints.gatekeeper.sh/v1beta1
                kind: ContainerLivenessprobeNotset
                metadata:
                  name: containerlivenessprobenotset
                status:
                  totalViolations: 0
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-admission-liveness
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          object-templates:
            - complianceType: mustnothave
              objectDefinition:
                apiVersion: v1
                kind: Event
                metadata:
                  namespace: openshift-gatekeeper-system # set it to the actual namespace where gatekeeper is running if different
                  annotations:
                    constraint_action: deny
                    constraint_kind: ContainerLivenessprobeNotset
                    constraint_name: containerlivenessprobenotset
                    event_type: violation
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-policy-gatekeeper-containerlivenessprobenotset
  annotations:
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzZWZ1JIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9ld3VndjlFZ3JxTWhKV1I0Y3V4aWd2UFVZMDZMSDVBZW1MVXlSYQpQMUhvK0RxQ1A0UitPMHEwdDlyaGtsUXFQaERsRFRzbVFONXdhckJnenR4WmV3QkJSTjc5YVNTUmFxSXRZSVdyCkdQdFFFUUFEVXpPWUtkREtxSjNTTDhldXZIemY1UHFtbXFTdUtqdHVTYmRrdW5BbHlVSy9MUVRqSjJpZllrVzcKTDdBOTN5ZUx4eTZTN0plcGx3WTErNnlnM2hHMHFTc2lyZm1iVGt6Znk2YWpXZFBmdHdpUWFkZ0FtRnZJSFAvMgpDRFBsWUZGRkx1Y0VnRG5pSDdIQnpwOVN4aUg3K0NyRVRZWENIOVFBQ2NpU3cyT2RiL05UUlY0QjMwaG5pOVpYCkJjNWZ2OEpnMHBVZDNrM2l3bUlDWjZaTzlFeDlYZlQ0bFR6NWJjM0VpR1MzTk1lWG1FRWJ6a1NtZythaGNjdnkKcDlnYjlNMTVRWVJlUk1pakk0OXZleStpcmpaVFBaeWRHRDJWSGYxYzN1MGtQaE16OHlnZnpDQ3lMRVhPeitUeQpoVU9IVFpYYU5ZcmM0N0pWM0pNOUJkbDFwVVRRQXBNNTRVekJXT0Q1MjBNbWgyQWRSSldNNHg0VlFiQUJxbzZDCkhucGtERHFJYy9Pc1lqOTY1OG5VZ0RHYmxabFdTWk5OCj1weFQ5Ci0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
placementRef:
  name: placement-policy-gatekeeper-containerlivenessprobenotset
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-gatekeeper-containerlivenessprobenotset
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-policy-gatekeeper-containerlivenessprobenotset
  annotations:
    integrityshield.io/message: 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
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEZCQUFCQ2dBdkZpRUVkZENIUWpWblNBUmhaMytYbTBOT3crQXJsb2NGQW1CSzZWZ1JIR2RoYW1GdVFHcHcKTG1saWJTNWpiMjBBQ2drUW0wTk93K0FybG9ld3VndjlFZ3JxTWhKV1I0Y3V4aWd2UFVZMDZMSDVBZW1MVXlSYQpQMUhvK0RxQ1A0UitPMHEwdDlyaGtsUXFQaERsRFRzbVFONXdhckJnenR4WmV3QkJSTjc5YVNTUmFxSXRZSVdyCkdQdFFFUUFEVXpPWUtkREtxSjNTTDhldXZIemY1UHFtbXFTdUtqdHVTYmRrdW5BbHlVSy9MUVRqSjJpZllrVzcKTDdBOTN5ZUx4eTZTN0plcGx3WTErNnlnM2hHMHFTc2lyZm1iVGt6Znk2YWpXZFBmdHdpUWFkZ0FtRnZJSFAvMgpDRFBsWUZGRkx1Y0VnRG5pSDdIQnpwOVN4aUg3K0NyRVRZWENIOVFBQ2NpU3cyT2RiL05UUlY0QjMwaG5pOVpYCkJjNWZ2OEpnMHBVZDNrM2l3bUlDWjZaTzlFeDlYZlQ0bFR6NWJjM0VpR1MzTk1lWG1FRWJ6a1NtZythaGNjdnkKcDlnYjlNMTVRWVJlUk1pakk0OXZleStpcmpaVFBaeWRHRDJWSGYxYzN1MGtQaE16OHlnZnpDQ3lMRVhPeitUeQpoVU9IVFpYYU5ZcmM0N0pWM0pNOUJkbDFwVVRRQXBNNTRVekJXT0Q1MjBNbWgyQWRSSldNNHg0VlFiQUJxbzZDCkhucGtERHFJYy9Pc1lqOTY1OG5VZ0RHYmxabFdTWk5OCj1weFQ5Ci0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=
spec:
  clusterConditions:
    - status: "True"
      type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - {key: environment, operator: In, values: ["dev"]}
